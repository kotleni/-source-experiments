// Copyright (C) 1997-2006 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Alias Script File
//  MODIFY THIS AT YOUR OWN RISK
//
//  Description:
//		This script is executed when a new scene file is created.  It will create
//		panels if required or use existing panels.
//
//  Creation Date:
//

global proc buildNewSceneUI() {

	global string  	$gMainPane;
	global string   $gNewScenePanelConfig;
	global int		$gUseNewScenePanelConfig;

	int    $menusOkayInPanels = `optionVar -q allowMenusInPanels`;
	int    $useNewSceneConfig = $gUseNewScenePanelConfig;
	string $panels[] = `getPanel -all`;


	if (!$useNewSceneConfig && (size($panels) == 0)) {
		//
		//  Currently no panels so use the new scene panels anyway.
		//
		$useNewSceneConfig = true;
	}


	if (`paneLayout -exists $gMainPane` && $useNewSceneConfig) {
		//
		//  Start building panels for the new scene.
		//
		int    $i;
		int    $count = 0;
		int    $nVis = `paneLayout -q -nvp $gMainPane`;
		string $type;
		string $types[4];
		string $panelName;
		string $editorName;
		string $itemFilterName;
		string $subFilter1, $subFilter2;

		//
		//  get current state of the UI
		//
		sceneUIReplacement -update $gMainPane;

		//  Model Views
		//
		if (`exists modelPanel`) {

			$panelLabel = localizedPanelLabel("Top View");
			$panelName = `sceneUIReplacement -getNextPanel "modelPanel" $panelLabel`;
			if ("" == $panelName) {
				$panelName = `modelPanel -mbv $menusOkayInPanels
					-parent $gMainPane -label $panelLabel `;
			} else {
				//
				//  Use an existing panel.
				//
				modelPanel -edit -label $panelLabel  $panelName;
			}
			$editorName = $panelName;
			modelEditor -e
				-camera `findStartUpCamera top`
				-useInteractiveMode 0
				-displayLights "default"
				-displayAppearance "wireframe"
				-activeOnly 0
				-wireframeOnShaded 0
				-bufferMode "double"
				-twoSidedLighting 1
				-backfaceCulling 0
				-xray 0
				-st 1
				-displayTextures 0
				//-textureMaxSize 1024 - this is queried from the hardware. Don't articially clamp it.
				-nurbsCurves 1
				-nurbsSurfaces 1
				-polymeshes 1
				-subdivSurfaces 1
				-planes 1
				-lights 1
				-cameras 1
				-joints 1
				-ikHandles 1
				-deformers 1
				-dynamics 1
				-locators 1
				-dimensions 1
				-handles 1
				-pivots 1
				-textures 1
				-fogging 0
				-shadows 0
				-smoothWireframe 0
				-lineWidth 1
				-viewSelected false
				$editorName;

			if (`isTrue "MayaCreatorExists"` &&
				(`licenseCheck -m "edit" -typ "particlePaint"`)) {
				modelEditor -e -strokes 1 $editorName;
			}

			// disable isolate select auto update
			editor -edit -lck -mainListConnection "activeList" $editorName;


			$panelLabel = localizedPanelLabel("Side View");
			$panelName = `sceneUIReplacement -getNextPanel "modelPanel" $panelLabel`;
			if ("" == $panelName) {
				$panelName = `modelPanel -mbv $menusOkayInPanels
										 -parent $gMainPane -label $panelLabel`;
			} else {
				modelPanel -edit -label $panelLabel $panelName;
			}
			$editorName = $panelName;
			modelEditor -e
				-camera `findStartUpCamera side`
				-useInteractiveMode 0
				-displayLights "default"
				-displayAppearance "wireframe"
				-activeOnly 0
				-wireframeOnShaded 0
				-bufferMode "double"
				-twoSidedLighting 1
				-backfaceCulling 0
				-xray 0
				-st 1
				-displayTextures 0
				// -textureMaxSize 1024 this is queried from the hardware. Don't articially clamp it
				-nurbsCurves 1
				-nurbsSurfaces 1
				-polymeshes 1
				-subdivSurfaces 1
				-planes 1
				-lights 1
				-cameras 1
				-joints 1
				-ikHandles 1
				-deformers 1
				-dynamics 1
				-locators 1
				-dimensions 1
				-handles 1
				-pivots 1
				-textures 1
				-fogging 0
				-shadows 0
				-smoothWireframe 0
				-lineWidth 1
				-viewSelected false
				$editorName;

			if (`isTrue "MayaCreatorExists"` &&
				(`licenseCheck -m "edit" -typ "particlePaint"`)) {
				modelEditor -e -strokes 1 $editorName;
			}

			// disable isolate select auto update
			editor -edit -lck -mainListConnection "activeList" $editorName;


			$panelLabel = localizedPanelLabel("Front View");
			$panelName = `sceneUIReplacement -getNextPanel "modelPanel" $panelLabel`;
			if ("" == $panelName) {
				$panelName = `modelPanel -mbv $menusOkayInPanels
										 -parent $gMainPane -label $panelLabel`;
			} else {
				modelPanel -edit -label $panelLabel $panelName;
			}
			$editorName = $panelName;
			modelEditor -e
				-camera `findStartUpCamera front`
				-useInteractiveMode 0
				-displayLights "default"
				-displayAppearance "wireframe"
				-activeOnly 0
				-wireframeOnShaded 0
				-bufferMode "double"
				-twoSidedLighting 1
				-backfaceCulling 0
				-xray 0
				-st 1
				-displayTextures 0
				// -textureMaxSize 1024 this is queried from the hardware. Don't articially clamp it
				-nurbsCurves 1
				-nurbsSurfaces 1
				-polymeshes 1
				-subdivSurfaces 1
				-planes 1
				-lights 1
				-cameras 1
				-joints 1
				-ikHandles 1
				-deformers 1
				-dynamics 1
				-locators 1
				-dimensions 1
				-handles 1
				-pivots 1
				-textures 1
				-fogging 0
				-shadows 0
				-smoothWireframe 0
				-lineWidth 1
				-viewSelected false
				$editorName;

			if (`isTrue "MayaCreatorExists"` &&
				(`licenseCheck -m "edit" -typ "particlePaint"`)) {
				modelEditor -e -strokes 1 $editorName;
			}

			// disable isolate select auto update
			editor -edit -lck -mainListConnection "activeList" $editorName;


			$panelLabel = localizedPanelLabel("Persp View");
			$panelName = `sceneUIReplacement -getNextPanel "modelPanel" $panelLabel`;
			if ("" == $panelName) {
				$panelName = `modelPanel -mbv $menusOkayInPanels
										 -parent $gMainPane -label $panelLabel`;
			} else {
				modelPanel -edit -label $panelLabel $panelName;
			}
			$editorName = $panelName;
			modelEditor -e
				-camera `findStartUpCamera persp`
				-useInteractiveMode 0
				-displayLights "default"
				-displayAppearance "wireframe"
				-activeOnly 0
				-wireframeOnShaded 0
				-bufferMode "double"
				-twoSidedLighting 1
				-backfaceCulling 0
				-xray 0
				-st 1
				-displayTextures 0
				// -textureMaxSize 1024 this is queried from the hardware. Don't articially clamp it
				-nurbsCurves 1
				-nurbsSurfaces 1
				-polymeshes 1
				-subdivSurfaces 1
				-planes 1
				-lights 1
				-cameras 1
				-joints 1
				-ikHandles 1
				-deformers 1
				-dynamics 1
				-locators 1
				-dimensions 1
				-handles 1
				-pivots 1
				-textures 1
				-fogging 0
				-shadows 0
				-smoothWireframe 0
				-lineWidth 1
				-viewSelected false
				$editorName;

			if (`isTrue "MayaCreatorExists"` &&
				(`licenseCheck -m "edit" -typ "particlePaint"`)) {
				modelEditor -e -strokes 1 $editorName;
			}

			// disable isolate select auto update
			editor -edit -lck -mainListConnection "activeList" $editorName;
		}

		if (`exists outlinerPanel`) {

			$panelLabel = localizedPanelLabel("Outliner" );
			$panelName = `sceneUIReplacement -getNextPanel "outlinerPanel" $panelLabel`;
			if ("" == $panelName) {
				$panelName = `outlinerPanel
						-mbv $menusOkayInPanels
						-unParent -label $panelLabel`;
			} else {
				outlinerPanel -edit -label $panelLabel $panelName;
				// Save the current state of the outliner
				//
				saveOutlinerSettings;
			}
			$editorName = $panelName;
            outlinerEditor -e
                -mainListConnection "worldList"
                -selectionConnection "modelList"
                -showShapes 0
                -showAttributes 0
                -showConnected 0
                -showAnimCurvesOnly 0
                -autoExpand 0
                -showDagOnly 1
                -ignoreDagHierarchy 0
                -expandConnections 0
                -showCompounds 1
                -showNumericAttrsOnly 0
                -highlightActive 1
                -autoSelectNewObjects 0
                -doNotSelectNewObjects 0
                -transmitFilters 0
				-showSetMembers 1
				-setFilter defaultSetFilter
                $editorName;
			// Apply any saved state settings
			//
			applyOutlinerSettings ($editorName);
		}

		if (`isTrue AnimationExists`) {

			$panelLabel = localizedPanelLabel("Graph Editor" );
			$panelName = `sceneUIReplacement -getNextScriptedPanel "graphEditor" $panelLabel`;
			if ("" == $panelName) {
				$panelName = `scriptedPanel -mbv $menusOkayInPanels
								-unParent -type "graphEditor" -label $panelLabel`;
			} else {
				scriptedPanel -edit -label $panelLabel $panelName;
			}
			$editorName = ($panelName+"OutlineEd");
            outlinerEditor -e
                -mainListConnection "graphEditorList"
                -selectionConnection "graphEditor1FromOutliner"
                -highlightConnection "keyframeList"
                -showShapes 1
                -showAttributes 1
                -showConnected 1
                -showAnimCurvesOnly 1
                -autoExpand 1
                -showDagOnly 0
                -ignoreDagHierarchy 0
                -expandConnections 1
                -showCompounds 0
                -showNumericAttrsOnly 1
                -highlightActive 0
                -autoSelectNewObjects 1
                -doNotSelectNewObjects 0
                -transmitFilters 1
				-showSetMembers 0
                $editorName;

			$editorName = ($panelName+"GraphEd");
            animCurveEditor -e
                -mainListConnection "graphEditor1FromOutliner"
                -displayKeys 1
                -displayTangents 0
                -displayActiveKeys 0
                -displayActiveKeyTangents 1
                -displayInfinities 0
                -autoFit 0
                -snapTime "integer"
                -snapValue "none"
                -smoothness "fine"
                -resultSamples 1
                $editorName;

			$panelLabel = localizedPanelLabel("Dope Sheet" );
			$panelName = `sceneUIReplacement -getNextScriptedPanel "dopeSheetPanel" $panelLabel`;
			if ("" == $panelName) {
				$panelName = `scriptedPanel -mbv $menusOkayInPanels
								-unParent -type "dopeSheetPanel" -label $panelLabel`;
			} else {
				scriptedPanel -edit -label $panelLabel $panelName;
			}
			$editorName = ($panelName+"OutlineEd");
            outlinerEditor -e
                -mainListConnection "animationList"
                -selectionConnection "dopeSheetPanel1OutlinerSelection"
				-highlightConnection keyframeList
                -showShapes 1
                -showAttributes 1
                -showConnected 1
                -showAnimCurvesOnly 1
                -autoExpand 0
                -showDagOnly 0
                -ignoreDagHierarchy 0
                -expandConnections 1
                -showCompounds 1
                -showNumericAttrsOnly 1
                -highlightActive 0
                -autoSelectNewObjects 0
                -doNotSelectNewObjects 1
                -transmitFilters 0
				-showSetMembers 0
                $editorName;

			$editorName = ($panelName+"DopeSheetEd");
            dopeSheetEditor -e
                -mainListConnection "dopeSheetPanel1FromOutliner"
                -highlightConnection "dopeSheetPanel1OutlinerSelection"
                -displayKeys 1
                -displayTangents 0
                -displayActiveKeys 0
                -displayActiveKeyTangents 0
                -displayInfinities 0
                -autoFit 0
                -snapTime "integer"
                -snapValue "none"
                -outliner "dopeSheetPanel1OutlineEd"
                $editorName;

			$panelLabel = localizedPanelLabel("Trax Editor" );
			$panelName = `sceneUIReplacement -getNextScriptedPanel "clipEditorPanel" $panelLabel`;
			if ("" == $panelName) {
				$panelName = `scriptedPanel -mbv $menusOkayInPanels
								-unParent -type "clipEditorPanel" -label $panelLabel`;
			} else {
				scriptedPanel -edit -label $panelLabel $panelName;
			}

			$editorName = clipEditorNameFromPanel($panelName);

            clipEditor -edit -mainListConnection clipEditorList
                $editorName;
			clipEditor -edit -lockMainConnection
                $editorName;
		}


		if (`exists hyperGraph`) {

			$panelLabel = localizedPanelLabel( "Hypergraph Hierarchy" );
			$panelName = `sceneUIReplacement -getNextScriptedPanel "hyperGraphPanel" $panelLabel`;
			if ("" == $panelName) {
				$panelName = `scriptedPanel -mbv $menusOkayInPanels
								-unParent -type "hyperGraphPanel" -label $panelLabel`;
			} else {
				scriptedPanel -edit -label $panelLabel $panelName;
			}
			$editorName = ($panelName+"HyperGraphEd");
            hyperGraph -e
				-image ""
                -graphType "DAG"
                $editorName;

			$panelLabel = localizedPanelLabel("Hypershade");
			$panelName = `sceneUIReplacement -getNextScriptedPanel "hyperShadePanel" $panelLabel`;
			if ("" == $panelName) {
				$panelName = `scriptedPanel -mbv $menusOkayInPanels
								-unParent -type "hyperShadePanel" -label $panelLabel`;
			} else {
				scriptedPanel -edit -label $panelLabel $panelName;
			}

			$panelLabel = localizedPanelLabel("Visor");
			$panelName = `sceneUIReplacement -getNextScriptedPanel "visorPanel" $panelLabel`;
			if ("" == $panelName) {
				$panelName = `scriptedPanel -mbv $menusOkayInPanels
								-unParent -type "visorPanel" -label $panelLabel`;
			} else {
				scriptedPanel -edit -label $panelLabel $panelName;
			}
		}

        if (`isTrue "PolyTextureExists"`)
        {

			$panelLabel = localizedPanelLabel("UV Texture Editor" );
			$panelName = `sceneUIReplacement -getNextScriptedPanel "polyTexturePlacementPanel" $panelLabel`;
			if ("" == $panelName) {
				$panelName = `scriptedPanel -mbv $menusOkayInPanels
								-unParent -type "polyTexturePlacementPanel" -label $panelLabel`;
			} else {
				$label = `panel -q -label $panelName`;
				scriptedPanel -edit -label $panelLabel $panelName;
			}
		}


		if (`isTrue "RenderingExists"`) {
			$panelLabel = localizedPanelLabel("Multilister" );
			$panelName = `sceneUIReplacement -getNextScriptedPanel "multiListerPanel" $panelLabel`;
			if ("" == $panelName) {
				$panelName = `scriptedPanel -mbv $menusOkayInPanels
								-unParent -type "multiListerPanel" -label $panelLabel`;
			} else {
				$label = `panel -q -label $panelName`;
				scriptedPanel -edit -label $panelLabel $panelName;
			}


			if (true) {
				$panelLabel = localizedPanelLabel("Render View");
				$panelName = `sceneUIReplacement -getNextScriptedPanel "renderWindowPanel" $panelLabel`;
				if ("" == $panelName) {
					$panelName = `scriptedPanel -mbv $menusOkayInPanels
									-unParent -type "renderWindowPanel" -label $panelLabel renderView`;
				} else {
					$label = `panel -q -label $panelName`;
					scriptedPanel -edit -label $panelLabel $panelName;
				}
			}
		}

		//if (`exists blendshapePanel`) {
		if (`isTrue DeformersExists`) {

			$panelLabel = localizedPanelLabel("Blend Shape" );
			$panelName = `sceneUIReplacement -getNextPanel "blendShapePanel" $panelLabel`;
			if ("" == $panelName) {
				$panelName = `blendShapePanel -mbv $menusOkayInPanels -unParent -label $panelLabel`;
			} else {
				$label = `panel -q -label $panelName`;
				blendShapePanel -edit -label $panelLabel $panelName;
			}
		}

		if (`isTrue "DynamicsExists"`) {

			$panelLabel = localizedPanelLabel("Dynamic Relationships" );
			$panelName = `sceneUIReplacement -getNextScriptedPanel "dynRelEdPanel" $panelLabel`;
			if ("" == $panelName) {
				$panelName = `scriptedPanel -mbv $menusOkayInPanels
								-unParent -type "dynRelEdPanel" -label $panelLabel`;
			} else {
				$label = `panel -q -label $panelName`;
				scriptedPanel -edit -label $panelLabel $panelName;
			}
		}

		if (`exists devicePanel`) {
			$panelLabel = localizedPanelLabel("Devices" );
			$panelName = `sceneUIReplacement -getNextPanel "devicePanel" $panelLabel`;
			if ("" == $panelName) {
				$panelName = `devicePanel -mbv $menusOkayInPanels
								-unParent -label $panelLabel`;
			} else {
				$label = `panel -q -label $panelName`;
				devicePanel -edit -label $panelLabel $panelName;
			}
		}

		if (`exists relationshipEditor`) {
			$panelLabel = localizedPanelLabel("Relationship Editor");
			$panelName =
				`sceneUIReplacement
						 -getNextScriptedPanel"relationshipPanel"
						 $panelLabel`;

			if ("" == $panelName) {
				$panelName = `scriptedPanel -mbv $menusOkayInPanels
								-unParent -type "relationshipPanel"
								-label $panelLabel`;
			} else {
				scriptedPanel -edit -label $panelLabel $panelName;
			}
		}

		if (`exists referenceEditorPanel`) {
			$panelLabel = localizedPanelLabel("Reference Editor" );
			$panelName =
				`sceneUIReplacement
						 -getNextScriptedPanel"referenceEditorPanel"
						 $panelLabel`;

			if ("" == $panelName) {
				$panelName = `scriptedPanel -mbv $menusOkayInPanels
								-unParent -type "referenceEditorPanel"
								-label $panelLabel`;
			} else {
				$label = `panel -q -label $panelName`;
				scriptedPanel -edit -label $panelLabel $panelName;
			}
		}

		if (`exists componentEditorPanel`) {
			$panelLabel = localizedPanelLabel("Component Editor" );
			$panelName =
				`sceneUIReplacement
						 -getNextScriptedPanel"componentEditorPanel"
						 $panelLabel`;

			if ("" == $panelName) {
				$panelName = `scriptedPanel -mbv $menusOkayInPanels
								-unParent -type "componentEditorPanel"
								-label $panelLabel`;
			} else {
				$label = `panel -q -label $panelName`;
				scriptedPanel -edit -label $panelLabel $panelName;
			}
		}


		if (`isTrue MayaCreatorExists` && `scriptedPanelType -exists dynPaintScriptedPanelType`) {
			$panelLabel = localizedPanelLabel("Paint Effects" );
			$panelName = `sceneUIReplacement -getNextScriptedPanel "dynPaintScriptedPanelType" $panelLabel`;
			if ("" == $panelName) {
				$panelName = `scriptedPanel	-unParent -type "dynPaintScriptedPanelType" -label $panelLabel dynPaintScriptedPanel`;
			} else {
				scriptedPanel -edit -label $panelLabel $panelName;
			}
			dynPaintPanel $panelName;
		}

		if (!(`about -is64`)) {
			$panelLabel = localizedPanelLabel("Web Browser" );
			$panelName = `sceneUIReplacement -getNextScriptedPanel "webBrowserPanel" $panelLabel`;
			if ("" == $panelName) {
				$panelName = `scriptedPanel -unParent -type "webBrowserPanel" -label $panelLabel`;
			} else {
				scriptedPanel -edit -label $panelLabel $panelName;
			}
		}

		if (`exists scriptEditorPanel`) {
			$panelLabel = localizedPanelLabel("Script Editor" );
			$panelName =
				`sceneUIReplacement
						 -getNextScriptedPanel "scriptEditorPanel"
						 $panelLabel`;

			if ("" == $panelName) {
				$panelName = `scriptedPanel -mbv $menusOkayInPanels
								-unParent -type "scriptEditorPanel"
								-label $panelLabel`;
			} else {
				$label = `panel -q -label $panelName`;
				scriptedPanel -edit -label $panelLabel $panelName;
			}
		}

		if ( `exists vsBuildSceneUI` )
		{
			vsBuildSceneUI( $menusOkayInPanels );
		}

		sceneUIReplacement -deleteRemaining;
		sceneUIReplacement -clear;

		setNamedPanelLayout $gNewScenePanelConfig;

		panelHistory -e -clear mainPanelHistory;
		setFocus `paneLayout -q -p1 $gMainPane`;

	}

	// View Cube - create and set options according to saved prefs
	//
	int $showViewCube = `optionVar -q viewCubeShowCube`;
	string $viewCubePos = `optionVar -q viewCubeScreenPosition`;
	string $viewCubeSize = `optionVar -q viewCubeSize`;
	float $viewCubeOpacity = `optionVar -q viewCubeInactiveOpacity`;
	int $viewCubeSnapToClosest = `optionVar -q viewCubeSnapToClosest`;
	int $viewCubeFitToView = `optionVar -q viewCubeFitToView`;
	int $viewCubePreserveSceneUp = on;

	if (`optionVar -exists viewCubePreserveSceneUp`)
		$viewCubePreserveSceneUp = `optionVar -q viewCubePreserveSceneUp`;

	viewManip
		 -visible $showViewCube
		 -size $viewCubeSize
		 -minOpacity $viewCubeOpacity
		 -dragSnap $viewCubeSnapToClosest
		 -preserveSceneUp $viewCubePreserveSceneUp
		 -zoomToFitScene $viewCubeFitToView;

	// Note: $viewCubePos is in form "topRight", "topLeft" etc.
	// so this will do "viewManip -topRight" for example
	string $viewCubeAdjustPositionCmd = "viewManip -" + $viewCubePos;
	eval( $viewCubeAdjustPositionCmd );

	//	allow textManip, used by the headsUpMessage command
	//
	textManip -visible true;

	// Create an instance of universal manipulator
	// (Use shared flag to make sure we don't get more than one).
	createNode xformManip -shared -name "UniversalManip";

	select -clear;
	// Set local or world space
	int $space = `optionVar -q xformManipWorldSpace`;
	setXformManip -ws $space;
	// Set rotate option
	int $usePivot = `optionVar -q xformManipUseRotatePivot`;
	setXformManip -urp $usePivot;

	// Hide units display on universal manipulator
	setXformManip -showUnits off;

	// Hide universal manipulator initially
	setXformManip -suppress on;
}
