// Copyright (C) 1997-2006 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//
//
//	Script Paint Tool UI script
//
global proc artUserPaintCreateSetupFrame(
	string 	$parent,
	string  $currTool
)
{
	setUITemplate -pushTemplate OptionsTemplate;
	setParent $parent;

	columnLayout;
	textFieldGrp  -label (uiRes("m_artUserPaintProperties.kToolSetupCmd"))  toolSetupTextField;

	textFieldGrp  -label (uiRes("m_artUserPaintProperties.kToolCleanupCmd"))  toolCleanupTextField;
	separator -h 20 -style "none";
	textFieldGrp  -label (uiRes("m_artUserPaintProperties.kGetSurfaceCmd"))  getSrfTextField;
	textFieldGrp  -label (uiRes("m_artUserPaintProperties.kGetArrayAttrCmd"))  getArrayAttrTextField;
	separator -h 20 -style "none";
	textFieldGrp  -label (uiRes("m_artUserPaintProperties.kInitializeCmd"))  initTextField;
	textFieldGrp  -label (uiRes("m_artUserPaintProperties.kFinalizeCmd"))  finalizeTextField;
	textFieldGrp  -label (uiRes("m_artUserPaintProperties.kSetValueCmd"))  setValueTextField;
	textFieldGrp  -label (uiRes("m_artUserPaintProperties.kGetValueCmd"))  getValueTextField;
	separator -h 20 -style "none";
	checkBoxGrp -ncb 1 -label (uiRes("m_artUserPaintProperties.kSendFullPaths"))
					   -label1 (uiRes("m_artUserPaintProperties.kOnOff"))
					    fullPathsChkBox;

	setParent ..;
	setParent ..;

	setUITemplate -popTemplate;
}


// =======================================================
// Main Procedure.
// =======================================================
global proc artUserPaintProperties()
{
	{
		int $override = 0;
		catch( $override = vst_artUserPaintProperties() );
		if ( $override )
			return;
	}

	// Base Artisan (applicable to all Artisan tools) properties.
	source "artisanProperties.mel";
	source "artisanCallback.mel";

	source "artAttrProperties.mel";
	source "artUserPaintCallback.mel";

	string	$currContext = `currentCtx`;
	string	$currTool	 = `contextInfo -c $currContext`;

	setUITemplate -pushTemplate DefaultTemplate;

	string $parent = `toolPropertyWindow -q -location`;
	setParent $parent;

	columnLayout -adj true artUserPaint;

	// Brush frameLayout.
	frameLayout -label (uiRes("m_artUserPaintProperties.kBrush"))
		-collapsable true -collapse false
		artUserPaintBrushFrame;

		// Create brush option menu.
		artisanCreateBrushFrame( "artUserPaintBrushFrame", $currTool );
	setParent ..;

   	frameLayout -label (uiRes("m_artUserPaintProperties.kPaintAttributes"))
       	-collapsable true -collapse false
       	artCommonOperationFrame;

		setUITemplate -pushTemplate OptionsTemplate;
		setParent artCommonOperationFrame;
		columnLayout;

		// Put all the common stuff.
		artAttrCreateCommonProperties();

		setParent ..;
		setUITemplate -popTemplate;
	setParent ..;

    // Stroke options.
	frameLayout -label (uiRes("m_artUserPaintProperties.kStroke"))
		-collapsable true -collapse true
		artUserPaintStrokeFrame;

		// Create stroke options.
		artisanCreateStrokeFrame( "artUserPaintStrokeFrame", $currTool );
	setParent ..;

    // Stylus Pressure options.
	frameLayout -label (uiRes("m_artUserPaintProperties.kStylusPressure"))
		-collapsable true -collapse true
		artUserPaintPressureFrame;

		// Create stroke options.
		artisanCreatePressureFrame( "artUserPaintPressureFrame", $currTool );
	setParent ..;

	// Attribute Maps options.
	frameLayout -label (uiRes("m_artUserPaintProperties.kAttributeMaps"))
		-collapsable true -collapse true
		artAttrAttrMapFrame;

		// Create Attribute Map option menu.
		artisanCreateAttrMapFrame( "artAttrAttrMapFrame", $currTool );
	setParent ..;

	// Display options.
	frameLayout -label (uiRes("m_artUserPaintProperties.kDisplay"))
		-collapsable true -collapse true
		artUserPaintDisplayFrame;

		// Create Display options.
		artisanCreateDisplayFrame( "artUserPaintDisplayFrame", $currTool );
	setParent ..;

	// Setup options.
	frameLayout -label (uiRes("m_artUserPaintProperties.kSetup"))
		-collapsable true -collapse true
		artUserPaintSetupFrame;

		// Create Display options.
		artUserPaintCreateSetupFrame( "artUserPaintSetupFrame", $currTool );
	setParent ..;

	setParent ..;
	setUITemplate -popTemplate;

	// Set the callbacks and various global functions.
	artUserPaintCallback( "artUserPaintCtx" );
}


