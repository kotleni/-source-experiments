// Copyright (C) 1997-2006 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//
//
// Script Paint Tool UI script
//
// Note that this script depends on your Linear units being set to cm.
// You can check your current units in the preferences window, under Settings.


// =======================================================
// Main callback procedure for Paint Selecion tool.
// =======================================================
global proc artUserPaintValues(
	string 	$toolName
)
{
	{
		int $override = 0;
		catchQuiet( $override = vst_artUserPaintValues( $toolName ) );
		if ( $override )
			return;
	}

	source "artisanCallback.mel";
    source "artisanValues.mel";

    source "artAttrValues.mel";

	string 	$artCommand	 = "artUserPaintCtx";
	string	$currContext = `currentCtx`;
	string	$currTool	 = `contextInfo -c $currContext`;

	// Provide a different icon for different attribute tools.
	string $icon	= "userPaint.xpm";
	string $helpTag = "UserPaintTool";

	string $parent = (`toolPropertyWindow -q -location` + "|artUserPaint");
	setParent $parent;

	toolPropertySetCommon $toolName $icon $helpTag;

	// Brush frameLayout values.
	artisanBrushValues( $artCommand, $currTool );

	// Common Attribute Paint UI.
	artAttrCommonValues( $artCommand, $currTool );

	// Stroke frameLayout values.
	artisanStrokeValues( $artCommand, $currTool );

	// Stylus Pressure frameLayout values.
	artisanPressureValues( $artCommand, $currTool );

	// Attribute Maps frameLayout values.
	artisanAttrMapValues( $artCommand, $currTool );

	// Display frameLayout values.
	artisanDisplayValues( $artCommand, $currTool );

	artUserPaintSetupValues( $artCommand, $toolName);

	toolPropertySelect artUserPaint;
}

global proc artUserPaintSetupValues(
	string $artCommand,
	string $toolName
	)
{
	string $cmd;

	$cmd = ($artCommand + " -q -tsc " + $toolName);
	textFieldGrp -e -text `eval $cmd` toolSetupTextField;

	$cmd = ($artCommand + " -q -tcc " + $toolName);
	textFieldGrp -e -text `eval $cmd` toolCleanupTextField;

	$cmd = ($artCommand + " -q -gsc " + $toolName);
	textFieldGrp -e -text `eval $cmd` getSrfTextField;

	$cmd = ($artCommand+ " -q -ic " + $toolName);
	textFieldGrp -e -text `eval $cmd` initTextField;

	$cmd = ($artCommand + " -q -fc " + $toolName);
	textFieldGrp -e -text `eval $cmd` finalizeTextField;

	$cmd = ($artCommand + " -q -svc " + $toolName);
	textFieldGrp -e -text `eval $cmd` setValueTextField;

	$cmd = ($artCommand+ " -q -gvc " + $toolName);
	textFieldGrp -e -text `eval $cmd` getValueTextField;

	$cmd = ($artCommand + " -q -gac " + $toolName);
	textFieldGrp -e -text `eval $cmd` getArrayAttrTextField;

    $cmd = ($artCommand + " -q -fp " + $toolName);
	checkBoxGrp -e -v1 `eval $cmd` fullPathsChkBox;
}
