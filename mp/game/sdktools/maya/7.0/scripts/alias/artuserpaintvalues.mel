// Copyright (C) 1997-2004 Alias Systems Corp.
// 
// The information in this file is provided for the exclusive use of the
// licensees of Alias.  Such users have the right to use, modify,
// and incorporate this code into other products for purposes authorized
// by the Alias license agreement, without fee.
// 
// ALIAS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
// EVENT SHALL ALIAS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
// CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.

//
//
//
// ALIAS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// EVENT SHALL ALIAS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
//
// Script Paint Tool UI script 
//
// Note that this script depends on your Linear units being set to cm.
// You can check your current units in the preferences window, under Settings.


// =======================================================
// Main callback procedure for Paint Selecion tool.
// =======================================================
global proc artUserPaintValues(
	string 	$toolName
)
{

	{
		int $override = 0;
		catchQuiet( $override = vst_artUserPaintValues( $toolName ) );
		if ( $override )
			return;
	}

	source "artisanCallback.mel";
    source "artisanValues.mel";

    source "artAttrValues.mel";

	string 	$artCommand	 = "artUserPaintCtx";
	string	$currContext = `currentCtx`;
	string	$currTool	 = `contextInfo -c $currContext`;

	// Provide a different icon for different attribute tools.
	string $icon	= "userPaint.xpm";
	string $helpTag = "UserPaintTool";

	string $parent = (`toolPropertyWindow -q -location` + "|artUserPaint");
	setParent $parent;

	toolPropertySetCommon $toolName $icon $helpTag;

	// Brush frameLayout values.
	artisanBrushValues( $artCommand, $currTool );

	// Common Attribute Paint UI.
	artAttrCommonValues( $artCommand, $currTool );
	
	// Stroke frameLayout values.
	artisanStrokeValues( $artCommand, $currTool );

	// Stylus Pressure frameLayout values.
	artisanPressureValues( $artCommand, $currTool );

	// Attribute Maps frameLayout values.
	artisanAttrMapValues( $artCommand, $currTool );

	// Display frameLayout values.
	artisanDisplayValues( $artCommand, $currTool );

	artUserPaintSetupValues( $artCommand, $toolName);
	
	toolPropertySelect artUserPaint;
}

global proc artUserPaintSetupValues( 
	string $artCommand,
	string $toolName
	)
{
	string $cmd;
	
	$cmd = ($artCommand + " -q -tsc " + $toolName);
	textFieldGrp -e -text `eval $cmd` toolSetupTextField;

	$cmd = ($artCommand + " -q -tcc " + $toolName);
	textFieldGrp -e -text `eval $cmd` toolCleanupTextField;

	$cmd = ($artCommand + " -q -gsc " + $toolName);
	textFieldGrp -e -text `eval $cmd` getSrfTextField;

	$cmd = ($artCommand+ " -q -ic " + $toolName);
	textFieldGrp -e -text `eval $cmd` initTextField;
 
	$cmd = ($artCommand + " -q -fc " + $toolName);
	textFieldGrp -e -text `eval $cmd` finalizeTextField;
 
	$cmd = ($artCommand + " -q -svc " + $toolName);
	textFieldGrp -e -text `eval $cmd` setValueTextField;
 
	$cmd = ($artCommand+ " -q -gvc " + $toolName);
	textFieldGrp -e -text `eval $cmd` getValueTextField;
 
	$cmd = ($artCommand + " -q -gac " + $toolName);
	textFieldGrp -e -text `eval $cmd` getArrayAttrTextField;

    $cmd = ($artCommand + " -q -fp " + $toolName);
	checkBoxGrp -e -v1 `eval $cmd` fullPathsChkBox;
}
