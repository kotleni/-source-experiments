// Copyright (C) 1997-2004 Alias Systems Corp.
//
// The information in this file is provided for the exclusive use of the
// licensees of Alias.  Such users have the right to use, modify,
// and incorporate this code into other products for purposes authorized
// by the Alias license agreement, without fee.
//
// ALIAS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
// EVENT SHALL ALIAS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
// CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.

//
//  Alias Script File
//  MODIFY THIS AT YOUR OWN RISK
//
//  Creation Date:  Jul 30, 1998
//
//  Description:
//      This script sets up the skinCluster dialog box
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//

proc setOptionVars (int $forceFactorySettings)
{
	//  bindTo
	//
	if ( $forceFactorySettings || !`optionVar -exists bindTo` ) {
		optionVar -intValue bindTo 1;
	}

	//  bindMethod
	//
	if ( $forceFactorySettings || !`optionVar -exists bindMethod` ) {
		optionVar -intValue bindMethod 1;
	}

	//	maxInfluences
	//
	if ($forceFactorySettings || !`optionVar -exists maxInfl`) {
		optionVar -intValue maxInfl 5;
	}
	if ($forceFactorySettings || !`optionVar -exists obeyMaxInfl`) {
		optionVar -intValue obeyMaxInfl 1;
	}

	//	dropoff power
	//
	if ($forceFactorySettings || !`optionVar -exists dropoff`) {
		optionVar -floatValue dropoff 4.0;
	}

	//	remove unused influences after bind
	//
	if ($forceFactorySettings || !`optionVar -exists removeUnusedInfluences`) {
		optionVar -intValue removeUnusedInfluences 1;
	}

	//	colorize skeleton after bind
	//
	if ($forceFactorySettings || !`optionVar -exists colorizeSkeleton`) {
		optionVar -intValue colorizeSkeleton 1;
	}
}

//
//  Procedure Name:
//      skinClusterSetup
//
//  Description:
//		Update the state of the option box UI to reflect the option values.
//
//  Input Arguments:
//      parent               - Top level parent layout of the option box UI.
//                             Required so that UI object names can be
//                             successfully resolved.
//
//		forceFactorySettings - Whether the option values should be set to
//                             default values.
//
//  Return Value:
//      None.
//
global proc skinClusterSetup (string $parent, int $forceFactorySettings)
{
	// Retrieve the option settings
	//
	setOptionVars( $forceFactorySettings );

	setParent $parent;

	// Query the optionVar's and set the values into the controls
	//

	// bindTo = to selected joints or to selected skeleton
	//
	optionMenuGrp -e -sl `optionVar -query bindTo` bindTo;

	// bindMethod = closest joint or closest distance
	//
	optionMenuGrp -e -sl `optionVar -query bindMethod` bindMethod;

	// maxInfluences
	//
	if (`intSliderGrp -exists maxInfl`) {
		intSliderGrp -edit
			-value `optionVar -query maxInfl`
			maxInfl;
	}
	if (`checkBoxGrp -exists obeyMaxInfl`) {
		checkBoxGrp -edit -value1 `optionVar -query obeyMaxInfl` obeyMaxInfl;
	}


	// dropoff power
	//
	if (`floatSliderGrp -exists dropoff`) {
		floatSliderGrp -edit
			-value `optionVar -query dropoff`
			dropoff;
	}

	// Should we remove unused influences after a bind?
	//
	if (`checkBoxGrp -exists removeUnusedInfluences`) {
	    checkBoxGrp -edit
	    -value1 `optionVar -query removeUnusedInfluences`
	    removeUnusedInfluences;
	}

	// check the colorize skeleton box if the corresponding variable is true.
	//
	if (`checkBoxGrp -exists colorizeSkeleton`) {
	    checkBoxGrp -edit
	    -value1 `optionVar -query colorizeSkeleton`
	    colorizeSkeleton;
	}

}


//
//  Procedure Name:
//      skinClusterCallback
//
//  Description:
//		Update the option values with the current state of the option box UI.
//
//  Input Arguments:
//      parent - Top level parent layout of the option box UI.  Required so
//               that UI object names can be successfully resolved.
//
//		doIt   - Whether the command should execute.
//
//  Return Value:
//      None.
//
global proc skinClusterCallback (string $parent, int $doIt)
{
    setParent $parent;

	// bindTo
	//
	optionVar -intValue bindTo `optionMenuGrp -q -sl bindTo`;

	// bindMethod
	//
	optionVar -intValue bindMethod `optionMenuGrp -q -sl bindMethod`;

	//	MaxInfluences
	//
	if (`intSliderGrp -exists maxInfl`) {
		optionVar -floatValue maxInfl
			`intSliderGrp -query -value maxInfl`;
	}
	if (`checkBoxGrp -exists obeyMaxInfl`) {
		optionVar -intValue obeyMaxInfl `checkBoxGrp -query -value1 obeyMaxInfl`;
	}

	//	Dropoff power
	//
	if (`floatSliderGrp -exists dropoff`) {
		optionVar -floatValue dropoff
			`floatSliderGrp -query -value dropoff`;
	}

	// Set the value of the persistent variable "removeUnusedInfluences" to
	// that of the option box.
	if (`checkBoxGrp -exists removeUnusedInfluences`) {
	    optionVar -intValue removeUnusedInfluences
			`checkBoxGrp -query -value1 removeUnusedInfluences`;
	}

	// Set the value of the persistent variable "colorizeSkeleton" to
	// that of the option box.
	if (`checkBoxGrp -exists colorizeSkeleton`) {
	    optionVar -intValue colorizeSkeleton
			`checkBoxGrp -query -value1 colorizeSkeleton`;
	}

	if ($doIt) {
		performSkinCluster false;
		addToRecentCommandQueue "performSkinCluster false" "Skin Cluster";
	}
}


proc string skinClusterBasic( string $tabLayout )
{
	setParent $tabLayout;

	string $tabForm = `columnLayout -adjustableColumn true`;

	optionMenuGrp
		-ann "Bind to all joints in the selected skeleton(s), selected joints only, or to all transform in the selected hierarchy."
		-label "Bind to"
		bindTo;

     	menuItem -l "Joint Hierarchy";
		menuItem -l "Selected Joints";
		menuItem -l "Object Hierarchy";

	optionMenuGrp
		-label "Bind Method"
		-ann "Bind based on distance plus hierarchy location or just by distance."
		bindMethod;

		menuItem -l "Closest In Hierarchy";
		menuItem -l "Closest Distance";


	intSliderGrp -label "Max Influences"
		-annotation "Specifies the maximum number of weighted influences for a given point."
		-fieldMinValue 0
		-minValue 0 -maxValue 30 maxInfl;

	checkBoxGrp -ncb 1
		-ann "Specifies whether the maximum influences is enforced during subsequent operations, such as weight painting."
		-label "After Bind"
		-label1 "Maintain Max Influences" obeyMaxInfl;

	floatSliderGrp -label "Dropoff Rate"
		-minValue 0.1 -maxValue 10.0 -fieldMaxValue 100.0 -pre 1 -sliderStep 0.1 dropoff;

	checkBoxGrp -ncb 1
		-annotation "This option improves performance by removing influences with all zero weights."
        -label1 "Remove Unused Influences" removeUnusedInfluences;

        checkBoxGrp -ncb 1
		-annotation "This option automatically assigns a color to each bone in the skeleton to allow easy visualizing of weights"
        -label1 "Colorize Skeleton" colorizeSkeleton;

		  //### BEGIN VALVE EDITS
		  checkBox -l "ignore bindpose" -align left -v(`optionVar -q ignoreBP`) -cc( "optionVar -iv ignoreBP #1;" ) ibpCheck;
		  //### END VALVE EDITS

	setParent -m ..;

	optionMenuGrp -e -sl 1 bindTo;

	optionMenuGrp -e -sl 1 bindMethod;

	setParent ..;

	return $tabForm;
}

global proc skinClusterOptions ()
{
	// Name of the command for this option box
	//
	string $commandName = "skinCluster";

	// Build the option box "methods"
	//
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	//	Get the option box.
	//
	//  The value returned is the name of the layout to be used as
	//	the parent for the option box UI.
	//
	string $layout = getOptionBox();
	setParent $layout;

	setOptionBoxCommandName("skinCluster");

	setUITemplate -pushTemplate DefaultTemplate;
	waitCursor -state 1;
	tabLayout -scr true -tv false;	// To get the scroll bars

	string $parent = `columnLayout -adjustableColumn 1`;

	skinClusterBasic $parent;

	waitCursor -state 0;
	setUITemplate -popTemplate;

	//	'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-label "Bind Skin"
		-command ($callback + " " + $parent + " " + 1)
		$applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;

	//	Set the option box title.
	//
	setOptionBoxTitle("Smooth Bind Options");

	//	Customize the 'Help' menu item text.
	//
	setOptionBoxHelpTag( "SmoothBind" );

	//	Set the current values of the option box.
	//
	eval (($setup + " " + $parent + " " + 0));

	//	Show the option box.
	//
	showOptionBox();
}

proc string assembleCmd ()
{
	string $cmd;

	setOptionVars( false );

	$cmd = "";
	int $colorSkeleton = `optionVar -query colorizeSkeleton`;
	if ($colorSkeleton) {
		string $joints[] = `ls -sl -type joint`;
		string $rootJoint = $joints[0];
		if($rootJoint != "") {
			$cmd = "colorizeSkeleton \"" + $rootJoint + "\";\n";
		}
	}

	$cmd += "newSkinCluster \"";

	int $bindTo = `optionVar -q bindTo`;
	if ($bindTo == 2)
	{
		$cmd = ( $cmd + "-toSelectedBones " );
	} else if ($bindTo == 3) {
		$cmd = ( $cmd + "-toSkeletonAndTransforms " );
	}

	if( `optionVar -q ignoreBP` ) $cmd += " -ibp ";
	int $bindMethod = `optionVar -q bindMethod`;
	if ($bindMethod == 2)
	{
		$cmd = ( $cmd + "-ignoreHierarchy ");
	}

	$cmd += "-mi " + `optionVar -query maxInfl` + " ";

	if (`optionVar -query obeyMaxInfl`) {
		$cmd += "-omi true ";
	}

	$cmd += "-dr " + `optionVar -query dropoff`;

	int $cullUnusedInfluences = `optionVar -query removeUnusedInfluences`;
	if ($cullUnusedInfluences)
	{
	    $cmd += " -rui true";
    }
    else
    {
        $cmd += " -rui false";
    }

	$cmd += "\";";

	return $cmd;
}

global proc string
// The action variable means
//		0 - do the command
//		1 - show the option box
//		2 - return the drag command
performSkinCluster (int $action)
{
	string $cmd = "";

	switch ($action) {
		case 0: // Execute the command
			// Retrieve the option settings
			//
			setOptionVars (false);

			// Get the command and print it in the command window
			$cmd = `assembleCmd`;

			// Execute the command with the option settings
			eval($cmd);

			break;
		case 1:  // Do the option box
			skinClusterOptions;
			break;
		case 2: // Return the drag string
			// Retrieve the option settings
			//
			setOptionVars (false);

			// Get the command
			$cmd = `assembleCmd`;

			break;
	}
	return $cmd;
}
