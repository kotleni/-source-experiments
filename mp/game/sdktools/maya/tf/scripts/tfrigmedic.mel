//scriptEditorInfo -ch;
//source tfRigMedic;
//tfRigMedic "Ref:" medicInfo;

global proc tfRigMedic( string $namespace, string $infoNode)
{
	string $vstInfo = `vstRigBiped $namespace $infoNode`;

	string $scale[] = { ".sx", ".sy", ".sz" };
	string $translation[] = { ".tx", ".ty", ".tz" };
	string $rotation[] = { ".rx", ".ry", ".rz" };
	string $vis[] = { ".v" };

	string $checkInfo[] = { "main", "pelvisControl", "headControl", "fkSpine1", "fkSpine2", "fkSpine3", "ikSpine1", "ikSpine2", "ikSpine3", "chestParent" };

	string $main;
	string $pelvisControl;
	string $headControl;
	string $fkSpine1;
	string $fkSpine2;
	string $fkSpine3;
	string $ikSpine1;
	string $ikSpine2;
	string $ikSpine3;
	string $chestParent;

	for ( $c in $checkInfo )
	{
		string $connections[] = `listConnections ( $vstInfo + "." + $c )`;
		if ( size( $connections ) > 1 )
		{
			error ( "More than one connection found: " + $vstInfo + "." + $c );
		}

		switch ( $c )
		{
			case "main":
				$main = $connections[0];
				break;
			case "pelvisControl":
				$pelvisControl = $connections[0];
				break;
			case "headControl":
				$headControl = $connections[0];
				break;
			case "fkSpine1":
				$fkSpine1 = $connections[0];
				break;
			case "fkSpine2":
				$fkSpine2 = $connections[0];
				break;
			case "fkSpine3":
				$fkSpine3 = $connections[0];
				break;
			case "ikSpine1":
				$ikSpine1 = $connections[0];
				break;
			case "ikSpine2":
				$ikSpine2 = $connections[0];
				break;
			case "ikSpine3":
				$ikSpine3 = $connections[0];
				break;
			case "chestParent":
				$chestParent = $connections[0];
				break;
			default:
				break;
		}
	}
	
	print ( "*\n*Rigging Props\n" );
	print ( "*------------------------\n" );	

	// Rig the pouches - parent them to $pelvisControl
    string $pouchL[] = { ( $namespace + "prp_hippouch_0_L" ), ( $namespace + "prp_hippouchEnd_L" ) };
    string $controlPouchL[] = vstFKchainAxis( "p", $pouchL, 2.0, "-Y" ); 
    string $pouchB[] = { ( $namespace + "prp_hippouch_0_B" ), ( $namespace + "prp_hippouchEnd_B" ) };
    string $controlPouchB[] = vstFKchainAxis( "p", $pouchB, 2.0, "-Y" ); 
	string $props[] = { $controlPouchL[0], $controlPouchB[0] };
	for ( $prop in $props )
	{
		$zeroProp = `vstMakeZero $prop`;
		vstHideChannels ( $prop, $translation );
		vstHideChannels ( $prop, $scale );
		vstHideChannels ( $prop, $vis );
		vstSelectHandle ( $prop, 0, 0, 0 );
		vstAddPlotted ( $prop );
		parent $zeroProp $pelvisControl;
	}

//////////////////////////
	// Rig the coat bones - parent them to $main, and constrain them to upperbody
	// prp_coat_front_0_L and prp_coat_front_0_R are rigged specially to follow bip_thigh
    string $coatFrontL[] = { ( $namespace + "prp_coat_front_1_L" ), ( $namespace + "prp_coat_front_2_L" ), ( $namespace + "prp_coat_frontEnd_L" )};
    string $coatFrontLControls[] = vstFKchainAxis( "p", $coatFrontL, 2.0, "-Y" ); 
	$coatFrontLControlsZero = `vstMakeZero $coatFrontLControls[0]`;
	vstMakeZeroTrans $coatFrontLControls[0];
	vstHideChannels ( $coatFrontLControls[0], $scale );
	vstHideChannels ( $coatFrontLControls[0], $vis );
	vstAddPlotted ( $coatFrontLControls[0] );
	for ( $i = 1; $i < size( $coatFrontLControls ); $i++ )
	{
		vstMakeZero $coatFrontLControls[$i];
		vstMakeZeroTrans $coatFrontLControls[$i];
		vstHideChannels ( $coatFrontLControls[$i], $scale );
		vstHideChannels ( $coatFrontLControls[$i], $vis );
		vstAddPlotted ( $coatFrontLControls[$i] );
	}
	parent $coatFrontLControlsZero $main;
	pointConstraint -mo -weight 1 $pelvisControl $coatFrontLControlsZero;

    string $coatFrontR[] = {( $namespace + "prp_coat_front_1_R" ), ( $namespace + "prp_coat_front_2_R" ), ( $namespace + "prp_coat_frontEnd_R" )};
    string $coatFrontRControls[] = vstFKchainAxis( "p", $coatFrontR, 2.0, "-Y" ); 
	$coatFrontRControlsZero = `vstMakeZero $coatFrontRControls[0]`;
	vstMakeZeroTrans $coatFrontRControls[0];
	vstHideChannels ( $coatFrontRControls[0], $scale );
	vstHideChannels ( $coatFrontRControls[0], $vis );
	vstAddPlotted ( $coatFrontRControls[0] );
	for ( $i = 1; $i < size( $coatFrontRControls ); $i++ )
	{
		vstMakeZero $coatFrontRControls[$i];
		vstMakeZeroTrans $coatFrontRControls[$i];
		vstHideChannels ( $coatFrontRControls[$i], $scale );
		vstHideChannels ( $coatFrontRControls[$i], $vis );
		vstAddPlotted ( $coatFrontRControls[$i] );
	}
	parent $coatFrontRControlsZero $main;
	pointConstraint -mo -weight 1 $pelvisControl $coatFrontRControlsZero;

	// TODO: clean this up - need to just get it working and repeatable for now
	select -d;
	string $controlBone0_L = `joint -p 2.766699 48.711914 6.5446070 -n "control_coatFront0L_0"`;
	string $controlBone1_L = `joint -p 2.766699 38.144659 6.5446070 -n "control_coatFront0L_1"`;
	joint -e -zso -oj xyz -sao yup $controlBone0_L;
	
	string $ikL[] = `ikHandle -sol ikSCsolver -sj $controlBone0_L -ee $controlBone1_L`;
	
	select -r $ikL[0];
	move -rpr 7.795091 40.180285 2.857676 ;
	
	parentConstraint -mo -weight 1 $controlBone0_L Ref:prp_coat_front_0_L;
	
	string $controlCoatL[] = `sphere -p 0 0 0 -ax 0 1 0 -ssw 0 -esw 360 -r 1.5 -d 3 -ut 0 -tol 0.01 -s 4 -nsp 2 -ch 0 -n "coatLControl"`;
	move -rpr 7.795091 40.180285 2.857676 $controlCoatL[0];
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $controlCoatL[0];
	string $locatorKneeL[] = `spaceLocator -n "locatorKneeL"`;
	move -rpr 5.055804 25.702795 -1.62065  $locatorKneeL[0];
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $locatorKneeL[0];
	
	parent $controlCoatL[0] $locatorKneeL[0];
	pointConstraint -mo -weight 1 $controlCoatL[0] $ikL[0];
	parentConstraint -mo -weight 1 Ref:bip_hip_L $locatorKneeL[0];
	
	parent $controlBone0_L main|UpperbodyControl;
	hide $controlBone0_L;
	parent $ikL[0] main|UpperbodyControl;
	hide $ikL[0];
	parent $locatorKneeL main|UpperbodyControl;
	
	vstHideChannels ( $controlCoatL[0], $scale );
	vstHideChannels ( $controlCoatL[0], $vis );
	vstSelectHandle ( $controlCoatL[0], 0,0,0 );
	vstAddPlotted   ( $controlCoatL[0] );
	
	select -d;
	string $controlBone0_R = `joint -p -2.766699 48.711914 6.5446070 -n "control_coatFront0R_0"`;
	string $controlBone1_R = `joint -p -2.766699 38.144659 6.5446070 -n "control_coatFront0R_1"`;
	joint -e -zso -oj xyz -sao yup $controlBone0_R;
	
	string $ikR[] = `ikHandle -sol ikSCsolver -sj $controlBone0_R -ee $controlBone1_R`;
	
	select -r $ikR[0];
	move -rpr -7.795091 40.180285 2.857676 ;
	
	parentConstraint -mo -weight 1 $controlBone0_R Ref:prp_coat_front_0_R;
	
	string $controlCoatR[] = `sphere -p 0 0 0 -ax 0 1 0 -ssw 0 -esw 360 -r 1.5 -d 3 -ut 0 -tol 0.01 -s 4 -nsp 2 -ch 0 -n "coatRControl"`;
	move -rpr -7.795091 40.180285 2.857676 $controlCoatR[0];
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $controlCoatR[0];
	string $locatorKneeR[] = `spaceLocator -n "locatorKneeR"`;
	move -rpr -5.055804 25.702795 -1.62065  $locatorKneeR[0];
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $locatorKneeR[0];
	
	parent $controlCoatR[0] $locatorKneeR[0];
	pointConstraint -mo -weight 1 $controlCoatR[0] $ikR[0];
	parentConstraint -mo -weight 1 Ref:bip_hip_R $locatorKneeR[0];
	
	parent $controlBone0_R main|UpperbodyControl;
	hide $controlBone0_R;
	parent $ikR[0] main|UpperbodyControl;
	hide $ikR[0];
	parent $locatorKneeR main|UpperbodyControl;
	
	vstHideChannels ( $controlCoatR[0], $scale );
	vstHideChannels ( $controlCoatR[0], $vis );
	vstSelectHandle ( $controlCoatR[0], 0,0,0 );
	vstAddPlotted   ( $controlCoatR[0] );

	// The three bone chains on the back of the coat don't need special controls, so they can be looped through easily
    string $coatBackL[] = {( $namespace + "prp_coat_back_0_L" ), ( $namespace + "prp_coat_back_1_L" ), ( $namespace + "prp_coat_back_2_L" ), ( $namespace + "prp_coat_backEnd_L" )};
    string $coatBackLControls[] = vstFKchainAxis( "p", $coatBackL, 2.0, "-Y" ); 

    string $coatBackM[] = {( $namespace + "prp_coat_back_0_M" ), ( $namespace + "prp_coat_back_1_M" ), ( $namespace + "prp_coat_back_2_M" ), ( $namespace + "prp_coat_backEnd_M" )};
    string $coatBackMControls[] = vstFKchainAxis( "p", $coatBackM, 2.0, "-Y" ); 

	string $coatBackR[] = {( $namespace + "prp_coat_back_0_R" ), ( $namespace + "prp_coat_back_1_R" ), ( $namespace + "prp_coat_back_2_R" ), ( $namespace + "prp_coat_backEnd_R" )};
    string $coatBackRControls[] = vstFKchainAxis( "p", $coatBackR, 2.0, "-Y" ); 

	string $rootCoatBones[] = { $coatBackLControls[0], $coatBackMControls[0], $coatBackRControls[0] };
	for ( $coat in $rootCoatBones )
	{
		$coatZero = `vstMakeZero $coat`;
		vstHideChannels ( $coat, $scale );
		vstHideChannels ( $coat, $vis );
		vstAddPlotted ( $coat );
		parent $coatZero $main;
		pointConstraint -mo -weight 1 $pelvisControl $coatZero;
	}

	string $childCoatBones[];
	for ( $i = 1 ; $i < size( $coatBackLControls ); $i++ ) $childCoatBones[size( $childCoatBones )] = $coatBackLControls[$i];
	for ( $i = 1 ; $i < size( $coatBackMControls ); $i++ ) $childCoatBones[size( $childCoatBones )] = $coatBackMControls[$i];
	for ( $i = 1 ; $i < size( $coatBackRControls ); $i++ ) $childCoatBones[size( $childCoatBones )] = $coatBackRControls[$i];
	for ( $child in $childCoatBones )
	{
		vstMakeZero $child;
		vstMakeZeroTrans $child;
		vstHideChannels ( $child, $scale );
		vstHideChannels ( $child, $vis );
		vstAddPlotted ( $child );
	}

	// Add single chain prop bones
	string $prop0[] = vstRigProp ("p", ($namespace + "prp_glasses"), $headControl);

	clear $props;
	$props = { $prop0[1] };
	for ($propBone in $props)
	{
		vstHideChannels ($propBone, $scale);
		vstHideChannels ($propBone, $vis);
		vstSelectHandle ($propBone, 0,0,0);
		vstAddPlotted ($propBone);
	}	

	print ("*\nDone with prop bones.\n");
	print ("**************************\n");
	select -cl;


	// set the hand rotation order to yxz
	setAttr lHandControl.rotateOrder 2;
	setAttr rHandControl.rotateOrder 2;

	// move the pole vectors to where animators want them
	setAttr "rkneeControl.translateZ" 20;
	setAttr "lkneeControl.translateZ" 20;
	setAttr "lElbowControl.translateZ" -20;
	setAttr "rElbowControl.translateZ" -20;

	string $poleVectors = `group -em -n poleVectorGroup`;
	parent rkneeControl  $poleVectors;
	parent lkneeControl  $poleVectors;
	parent lElbowControl $poleVectors;
	parent rElbowControl $poleVectors;
	
	parent $poleVectors $main;
	pointConstraint -mo -weight 1 |main|UpperbodyControl $poleVectors;

	// backpack hose constraint
	string $backpackLocator[] = `spaceLocator -n prp_backpackHosePt`;
	move -rpr -4.237214 59.579866 -8.748013 $backpackLocator[0];

	parent $backpackLocator[0] Ref:bip_spine_2FKcontrol;

}

/*
select -d;
joint -p 2.766699 48.711914 6.544607 ;
joint -p 2.766699 38.144659 6.5446070 ;
joint -e -zso -oj xyz -sao yup joint1;

select -r joint2.rotatePivot ;
select -add joint1.rotatePivot ;
ikHandle;

select -r ikHandle1 ;
move -rpr 7.795091 40.180285 2.857676 ;

select -r joint1 ;
select -tgl Ref:prp_coat_front_0_L ;
parentConstraint -mo -weight 1;

spaceLocator;
move -rpr 7.525165 40.638267 3.055592 ;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;

spaceLocator;
move -rpr 5.055804 25.702795 -1.62065 ;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;

parent locator1 locator2 ;
select -r locator2 ;
select -r locator1 ;
select -add ikHandle1 ;
pointConstraint -mo -weight 1;
select -r Ref:bip_hip_L ;
select -add locator2 ;
parentConstraint -mo -weight 1;
