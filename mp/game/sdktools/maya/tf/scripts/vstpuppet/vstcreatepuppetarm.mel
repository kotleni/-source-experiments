// script for creating an IK driven arm
// TODO: build hand templates (1, 2, 3, 4, 5 fingered hands and hook them up based on arguments.
global proc string[] vstCreatePuppetArm(string $name, string $clavicleNode, string $shoulderNode, string $elbowNode, string $handNode,  int $numFingers, int $thumb)
{
	// Take the given nodes and prefix and generate an arm and control
	// structure.  When finished, return the root node of the arm (in this
	// case, the clavicle joint..
	string $clavicleJoint = ("Bip01_" + $name + "_Clavicle");
	string $shoulderJoint = ("Bip01_" + $name + "_UpperArm");
	string $elbowJoint = ("Bip01_" + $name + "_Forearm");
	string $handJoint = ("Bip01_" + $name + "_Hand");

	// get the positions of the locators
	float $claviclePos[] = `xform -q -ws -rp $clavicleNode`;
	float $shoulderPos[] = `xform -q -ws -rp $shoulderNode`;
	float $elbowPos[] = `xform -q -ws -rp $elbowNode`;
	float $handPos[] = `xform -q -ws -rp $handNode`;

	// get the lengths of the bones.
	float $clavicleDist = mag (<<$claviclePos[0], $claviclePos[1], $claviclePos[2]>> - <<$shoulderPos[0], $shoulderPos[1], $shoulderPos[2]>>);
	float $bicepDist = mag (<< $shoulderPos[0], $shoulderPos[1], $shoulderPos[2] >> - << $elbowPos[0], $elbowPos[1], $elbowPos[2] >>);
	float $forearmDist = mag (<< $elbowPos[0], $elbowPos[1], $elbowPos[2] >> - << $handPos[0], $handPos[1], $handPos[2] >>);

	// clear the current selection to begin joint creation
	select -cl;

	// create clavicle, shoulder, and elbow joints
	$clavicleJoint = `joint -p 0 0 0 -n $clavicleJoint`;
//	joint -e -zso -oj yzx $clavicleJoint;

	$shoulderJoint = `joint -r -p 0 (-$clavicleDist) 0 -n $shoulderJoint`;
//	joint -e -zso -oj yzx $shoulderJoint;

	$elbowJoint = `joint -r -p 0 (-$bicepDist) 0 -n $elbowJoint`;
//	joint -e -zso -oj yzx $elbowJoint;

	// create hand joint
	$handJoint = `joint -r -p 0 (-$forearmDist) 0 -n $handJoint`;
//	joint -e -zso -oj yzx $handJoint;

	// rotate the shoulder and elbow out temporarily to make the IK work properly
	setAttr  ($shoulderJoint + ".rotateX") -45;
	setAttr  ($elbowJoint + ".rotateX") -90;

	// set the preferred joint angles.
	joint -e -spa -ch $clavicleJoint ;
	joint -e -spa -ch $shoulderJoint ;
	joint -e -spa -ch $elbowJoint ;
	joint -e -spa -ch $handJoint ;

	// temporarily constrain controls to be on the bones
	$pc = `pointConstraint $clavicleJoint $clavicleNode`;
	delete $pc;
	$pc = `pointConstraint $shoulderJoint $shoulderNode`;
	delete $pc;
	$pc = `pointConstraint $elbowJoint $elbowNode`;
	delete $pc;
	$pc = `pointConstraint $handJoint $handNode`;
	delete $pc;

	// create the ikHandle and poleVectorControl for the arm
	$armHandle = `ikHandle -sol ikRPsolver -sj $shoulderJoint -ee $handJoint -n ($name + "_armHandle")`;
	poleVectorConstraint $elbowNode $armHandle[0];

	// constrain the joints to the control nodes an return them to their original positions
	$clavConstraint = `pointConstraint $clavicleNode $clavicleJoint`;
	$shoulderConstraint = `pointConstraint $shoulderNode $shoulderJoint`;
	pointConstraint $handNode $armHandle[0];

	move -a $claviclePos[0] $claviclePos[1] $claviclePos[2] $clavicleNode;
	move -a $shoulderPos[0] $shoulderPos[1] $shoulderPos[2] $shoulderNode;
	move -a $elbowPos[0] $elbowPos[1] $elbowPos[2] $elbowNode;
	move -a $handPos[0] $handPos[1] $handPos[2] $handNode;

	// remove the clavicle and shouldr constraints, and connect the clavicle rotation to the control node
	delete $clavConstraint;
	delete $shoulderConstraint;
	connectAttr -f ($clavicleNode + ".rotateX") ($clavicleJoint + ".rotateX");
	connectAttr -f ($clavicleNode + ".rotateY") ($clavicleJoint + ".rotateY");
	connectAttr -f ($clavicleNode + ".rotateZ") ($clavicleJoint + ".rotateZ");

	// hide everything unnecessary
	string $stuff[] = {("" + $armHandle[0] + "")};
	vstHideUnnecessary $stuff;

	string $outArray[] =
	{
		$clavicleJoint,
		$clavicleNode,
		$shoulderNode,
		$handJoint
	};

	print ("=== arm created: " + $name + "\n\t" + $clavicleJoint + "\n\t" + $clavicleNode + "\n\t" + $shoulderNode + "\n");
	return ($outArray);
}
