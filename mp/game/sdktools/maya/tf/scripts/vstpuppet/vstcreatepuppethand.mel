proc string _findFingerName(string $fingerNode)
{
	// $fingerNode is a full dag path, so tokenize on "|" and use the last array element as the joint name
	string $buffer[];
	int $numTokens = `tokenize $fingerNode "|" $buffer`;
	string $fingerJointName = ("Bip01_" + $buffer[$numTokens -1]);
	return $fingerJointName;
}

// proposed limitations:
//	-children of the base finger node are not allowed to tranlate in X (assuming X is the bend axis, and Y is aligned to the bone axis)

// finger axis orientation
// joint -e -oj yxz -secondaryAxisOrient zdown -ch -zso;

// thumbs will want this for their axis orientation:
// joint -e -oj yxz -secondaryAxisOrient zdown -ch -zso;

global proc vstCreatePuppetHand(string $wrist, string $fingerControl)
{
	// find all the fingers
	// the thumb is a finger, and it's locators are oriented -90 from the finger orientation
	string $fingerRootNodes[] = `listRelatives -f $fingerControl`;

	// $fingers[] is the root joints of all the finger chains
	string $fingers[];
	string $removeHandles[];

	for ($fingerNode in $fingerRootNodes)
	{
		// clear the current selection so when we build the first joint it is a child of the world
		select -cl;

		// create the joint chain at the origin
		string $fingerJointName = `_findFingerName $fingerNode`;
		string $currentFinger = `joint -p 0 0 0 -n $fingerJointName`;

		// store the current finger for positioning after the children are made
		$fingers[size($fingers)] = $currentFinger;

		// get the children nodes, and make a joint chain based on their positions
		// -ad returns grandchildren first, so loop through them in reverse order
		string $fingerChildNodes[] = `listRelatives -ad -f $fingerNode`;

		// store data for later position query
		string $fingerJointNames[];
		string $fingerNodeNames[];

		for ($count = (size($fingerChildNodes)-1); $count >= 0; $count--)
		{
			// find the parent of the current node so the distance can be measured
			string $parentNode[] = `listRelatives -p -f $fingerChildNodes[$count]`;

			// get the lengths for the finger bones based on the worldspace positions of the node and its parent
			float $nodePos[] = `xform -q -ws -rp $fingerChildNodes[$count]`;
			float $parentPos[] = `xform -q -ws -rp $parentNode[0]`;
			float $jointLength = mag (<<$parentPos[0], $parentPos[1], $parentPos[2]>> - <<$nodePos[0], $nodePos[1], $nodePos[2]>>);

			// make the joint using the current joint length
			// the previous joint is still the current selection, so this will be a child of that joint
			string $fingerChildJointName = `_findFingerName $fingerChildNodes[$count]`;
			string $fingerChildJoint = `joint -r -p 0 (-$jointLength) 0 -n $fingerChildJointName`;

			$fingerJointNames[size($fingerJointNames)] = $fingerChildJoint;
			$fingerNodeNames[size($fingerNodeNames)] = $fingerChildNodes[$count];
		}

		// get position and orientation for the root of the finger
		float $fingerRootPos[] = `xform -q -ws -rp $fingerNode`;
		float $fingerRootRot[] = `xform -q -ws -ro $fingerNode`;

		// put the finger at the control node location
		xform -t $fingerRootPos[0] $fingerRootPos[1] $fingerRootPos[2] -ro $fingerRootRot[0] $fingerRootRot[1] $fingerRootRot[2] $currentFinger;

		// for all the $fingerJointNames, find the current position, and figure out the proper rotation to match the fingerNode
		for ($jCount = 0; $jCount < size($fingerJointNames); $jCount++)
		{
			// find the positions of the current joint and node
			float $jointPos[] = `xform -q -ws -rp $fingerJointNames[$jCount]`;
			float $nodePos[] = `xform -q -ws -rp $fingerNodeNames[$jCount]`;
			
			// find the parents of the current joint and node and get their positions
			string $jointParent[] = `listRelatives -p -f $fingerJointNames[$jCount]`;
			float $jointParentPos[] = `xform -q -ws -rp $jointParent[0]`;
		
			// create ikhandles from the parent to the child joint, and position them at the child node
			string $tmpHandle[] = `ikHandle -sol ikSCsolver -sj $jointParent[0] -ee $fingerJointNames[$jCount]`;
			xform -t $nodePos[0] $nodePos[1] $nodePos[2] $tmpHandle[0];
			$removeHandles[size($removeHandles)] = $tmpHandle[0];
		}
		clear $fingerJointNames;
		clear $fingerNodeNames;
	}

	// just deleting the $removeHandles array makes the last joint move from the node position, so refresh first
	refresh;
	delete $removeHandles;

	// remove the locators that the fingers were created from
	delete $fingerRootNodes;

	// parent the fingers to the appropriate object
	parent $fingers $wrist;

}
