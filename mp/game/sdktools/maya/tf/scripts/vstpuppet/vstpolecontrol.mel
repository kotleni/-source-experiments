//*****************************************
//
//	vstPoleControl
//	-makes a cone that controls the pole vector
//
//	use: vstPoleControl( side, name, midBoneInChain, endBoneInChain,ikHandle, vstInfo )
//	vstPoleControl( "R", "elbowControl", "RElbow", "RWrist", "RhandIK", vstInfo )
//
// 	by: steve/wade
//	stevek@valvesoftware.com
//	wade@valvesoftware.com
//	5/18/2006
//		-passed in the vstInfo node so that channels can be locked/hidden/added to plotted
//		-check whether an elbow or knee is passed in, in order to name the controls properly
//
//******************************************

global proc string vstPoleControl( string $side, string $name, string $midBone, string $endBone, string $handle, string $parent, string $vstInfo )
{
	// determine if $name is an elbow or a knee
	string $elbowOrKnee;
	string $armOrLeg;
	if ( `gmatch $name "*Elbow*"` )
	{
		$elbowOrKnee = "Elbow";
		$armOrLeg = "Arm";
	}
	else		
	{
		$elbowOrKnee = "Knee";
		$armOrLeg = "Leg";
	}

	string $poleControl = $side + $name;
	sphere -r 1 -s 4 -d 1 -nsp 2 -name $poleControl -ch 0 -po 0;
	select $poleControl;
	vstSetDisplay( $side, $poleControl );
	delete `pointConstraint $midBone $poleControl`;

	// get the mid and end bones position
	float $midBonePos[] = `xform -worldSpace -query -translation $midBone`;
	float $endBonePos[] = `xform -worldSpace -query -translation $endBone`;
	// now we snap it into position
	xform -worldSpace -translation $midBonePos[0] $midBonePos[1] $midBonePos[2] $poleControl;
	
	// that was just part 1, now we need to offset the control back a bit
	// so it does not get stuck in the mesh and keep the bone in place
	// find out how far down from the elbow is the wrist? and invert it for the pole control
	//int $xDelta = (2*($midBonePos[0] - $endBonePos[0]));
	//int $yDelta = (2*($midBonePos[1] - $endBonePos[1]));
	//int $zDelta = (2*($midBonePos[2] - $endBonePos[2]));
	
	//xform -worldSpace -translation ($midBonePos[0] + $xDelta) ($midBonePos[1] + $yDelta) ($midBonePos[2] + $zDelta) $poleControl;
	select -r $poleControl;
	makeIdentity -apply true -t 1;
	// now apply the constraint
	poleVectorConstraint  $poleControl $handle;
	parent $poleControl $parent;


	vstInfoAttr( ( $side + $elbowOrKnee + "Control" ), $poleControl, $vstInfo );
	vstDisplayExp( $poleControl, ( $side + $armOrLeg + "IKFK" ) );
	vstHideChannels( $poleControl, { ".rx", ".ry", ".rz", ".sx", ".sy", ".sz", ".v" } );
	vstSelectHandle( $poleControl, 0, 0, 0 );
	vstAddPlotted( $poleControl );


	return $poleControl;
}