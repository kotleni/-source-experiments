//*****************************************
//
//	vstFootControl
//	-makes a box for the foot and toe controls
//	-sizes the control based on the size of the foot guide
//	-hooks up all the connections for the foot controls
//
//	by: steve/wade
//	stevek@valvesoftware.com
//	wade@valvesoftware.com
//	5/18/2006
//		-passed in the vstInfo node so that channels can be locked/hidden/added to plotted
//
//******************************************

global proc string[] vstFootControl( string $side, string $name, string $foot, string $toe, string $footControlName, string $toeControlName, string $reverseFoot[], string $parent, string $ikHandle, string $vstInfo )
{
	// this is what we will be returning eventually
	string $footControls[];

	// define the guide string
	string $guideHeel  = $side + "FootGuideRear";
	string $guideBall  = $side + "FootGuideCenter";
	string $guideToe   = $side + "FootGuideFront";
	string $guideLeft  = $side + "FootGuideLeft";
	string $guideRight = $side + "FootGuideRight";

	// grab some global coordinates to help with the placement and sizing
	float $heelPos[] = `xform -q -t -ws $guideHeel`;
	float $ballPos[] = `xform -q -t -ws $guideBall`;
	float $toeGuidePos[]  = `xform -q -t -ws $guideToe`;
	float $footPos[] = `xform -q -t -ws $foot`;
	float $leftPos[] = `xform -q -t -ws $guideLeft`;
	float $rightPos[] = `xform -q -t -ws $guideRight`;
    float $toePos[]  = `xform -q -t -ws $toe`;

	// we get the width and length of the foot control
	// based on the distances of the foot guide
	float $width = vstDistance( $guideRight, $guideLeft );
	float $toeLength = vstDistance( $guideBall, $guideToe );
	float $heelLength = vstDistance( $guideBall, $guideHeel );

	// the height is gotten from how high above the heel guide the ankle bone is
	float $height = $footPos[1] - $heelPos[1];
	float $depth = ( $footPos[2] - $heelPos[2] ) * 2;
	float $toeHeight = ( 2 * ( $toePos[1] - $ballPos[1] ) );
	float $ankleHeight = ( $footPos[1] - $heelPos[1] );

	// name the control
	string $footControl = ($side + $footControlName);

	// make the foot control
	sphere -r ( $width/2 ) -d 1 -s 4 -nsp 3 -name $footControl -ch 0 -po 0;
	string $rotateX = ( $footControl + ".rotateX" );
	setAttr $rotateX -45;
	select -r $footControl;
	makeIdentity -apply true -t 0 -r 1 -s 0 -n 0;

	// reshape the cube
	// move the top cv's up
	string $verts = ( $footControl + ".cv[1:2][2:3]" );
	move -r -ws 0 ( $ankleHeight/2 ) 0 $verts;

	// move the bottom cvs down
	select -r ( $footControl + ".cv[1][0:1] " );
	select -tgl ( $footControl + ".cv[1][4]" );
	select -tgl ( $footControl + ".cv[2][0:1]" );
	select -tgl ( $footControl + ".cv[2][4]" );
	move -r -ws 0 ( -1 * ( $ankleHeight/2 ) ) 0;

	// do some 2d distance calcs so we can move the verts to the right place
	// and fit the box to the guide
	float $xDelta = ( $footPos[0] - $ballPos[0] );
	float $zDelta = ( $footPos[2] - $ballPos[2] );
	float $distanceFootBall = `sqrt ( ( $xDelta * $xDelta ) + ( $zDelta * $zDelta ) )`;
	string $frontFace = ( $footControl + ".cv[1:2][1:2]" );
	float $moveForward = ( $distanceFootBall/2 );
	move -r -ws -wd 0 0 $moveForward $frontFace;

	float $xDelta = ( $footPos[0] - $heelPos[0] );
	float $zDelta = ( $footPos[2] - $heelPos[2] );
	float $distanceFootHeel = `sqrt ( ( $xDelta * $xDelta ) + ( $zDelta * $zDelta ) )`;
	select -r ( $footControl + ".cv[1][0] " );
	select -tgl ( $footControl + ".cv[1][3:4]" );
	select -tgl ( $footControl + ".cv[2][0]" );
	select -tgl ( $footControl + ".cv[2][3:4]" );
	float $moveBack = ( -1 * ( $distanceFootHeel/2 ) );
	move -r -ws -wd 0 0 $moveBack;
	select -cl;

	// snap it to the foot bone
	pointConstraint $foot $footControl;
	float $rot[] = `xform -worldSpace -q -rotation $reverseFoot[0]`;
	pointConstraint -rm $foot $footControl;
	delete `orientConstraint -skip x -skip z $foot $footControl`;

	// zero out the translations
	select -r $footControl;
	makeIdentity -apply true -t 1 -r 0 -s 0 -n 0;
	select -cl;
	// make the toe control
	string $toeControl = ( $side + $toeControlName );
	sphere -r ( $width/2 ) -d 1 -s 4 -nsp 3 -name $toeControl -ch 0 -po 0;
	string $rotateX = ( $toeControl + ".rotateX" );
	setAttr $rotateX -45;
	select -r $toeControl;
	makeIdentity -apply true -t 0 -r 1 -s 0 -n 0;
	float $toeGuidePos[] = `xform -q -t -ws `;
	// move the top cv's up
	string $verts = ( $toeControl + ".cv[1:2][2:3]" );
	float $moveUp = ( $toeHeight - $width/2 );
	move -r -ws 0 $moveUp 0 $verts;
	// select the verts and move them forward to fit the toe
	string $cvs = ( $toeControl + ".cv[1:2][1:2]" );
	move -r 0 0 ( $toeLength/2 ) $cvs;
	// move the bottom cvs down
	select -r ( $toeControl + ".cv[1][0:1] " );
	select -tgl ( $toeControl + ".cv[1][4]" );
	select -tgl ( $toeControl + ".cv[2][0:1]" );
	select -tgl ( $toeControl + ".cv[2][4]" );
	float $moveDown = ( $width/2 - $toeHeight );
	move -r -ws 0 $moveDown 0;
	// move the back face to the toe
	float $cvPos[] = `xform -q -ws -t ( $toeControl + ".cv[2][2]" )`;
	float $cv2Pos[] = `xform -q -ws -t ( $toeControl + ".cv[3][0]" )`;
	select -r ( $toeControl + ".cv[1][0]" );
	select -tgl ( $toeControl + ".cv[1][3:4]" );
	select -tgl ( $toeControl + ".cv[2][0]" );
	select -tgl ( $toeControl + ".cv[2][3:4]" );
//	print ( $cvPos[2] + "\n" );
//	print ( $cv2Pos[2] + "\n" );
	float $move= ( -1 *( $cvPos[0] - $cv2Pos[0] ) );
	move -r -ws -wd 0 0 $move;
	select -cl;

	delete `orientConstraint -skip x -skip z $foot $footControl`;

	string $attr = ( $toeControl + ".rotateY" );
	setAttr $attr $rot[1];

	select -r $toeControl;
	makeIdentity -apply true -t 1;
	select -cl;
	string $toeZeroGroup = `vstMakeZero( $toeControl )`;
	delete `pointConstraint $toe $toeZeroGroup`;

	// parent the toe to the foot
	parent $toeZeroGroup $reverseFoot[4];
	orientConstraint  -mo $toeControl $reverseFoot[8];

	// set the display colors
	vstSetDisplay( $side, $footControl );
	vstSetDisplay( $side, $toeControl );
	select -cl  ;

	// link up the reverse foot to some attrs on the foot control
	// add the foot attrs
	select $footControl;
	addAttr -ln "heelRock" -at double -k 1 -min -45 -max 0 -dv 0;
	addAttr -ln "ankleLift" -at double -k 1 -min 0 -max 55 -dv 0;
	addAttr -ln "toeLift" -at double -k 1 -min 0 -max 90 -dv 0;
	addAttr -ln "ankleBank" -at double -k 1 -min -40 -max 40 -dv 0;
	addAttr -ln "rockL" -at double -k 1 -min 0 -max 90 -dv 0;
	addAttr -ln "rockR" -at double -k 1 -min 0 -max 90 -dv 0;
	addAttr -ln "ballPivot" -at double -k 1 -min -90 -max 90 -dv 0;
	select -cl;

	// heel rock connection
 	string $heelX = $reverseFoot[4] + ".rotateX";
	string $heelAttr = $footControl + ".heelRock";
 	connectAttr $heelAttr $heelX;

	// ankleLift expression
	string $ankleX = $reverseFoot[6] + ".rotateX";
	string $liftAttr = $footControl + ".ankleLift";
 	connectAttr $liftAttr $ankleX;

	// toelift connection
	string $toeX = $reverseFoot[5] + ".rotateX";
	string $toeLiftAttr = $footControl + ".toeLift";
 	connectAttr $toeLiftAttr $toeX;

	// ankleBank connection
	string $ankleTwist = ($ikHandle + ".twist");
	string $bankAttr = $footControl + ".ankleBank";
	connectAttr $bankAttr $ankleTwist;

	// rockR connection
	string $rRollZ = $reverseFoot[1] + ".rotateZ";
	string $rollRattr = $footControl + ".rockR";
 	connectAttr  $rollRattr $rRollZ;

	// rockL connection
	string $lRollZ = $reverseFoot[2] + ".rotateZ";
	string $rollLattr = $footControl + ".rockL";
 	string $rockLExp = ( $lRollZ + " = -1 * " + $rollLattr + "\n" );
	expression -s $rockLExp -n ( $side + "rockLexp" );

	// ball pivot connection
	string $ballY = $reverseFoot[3] + ".rotateY";
	string $toeY = $footControl + ".ballPivot";
	connectAttr $toeY  $ballY;

	// stick the reverse foot to the foot control
	parentConstraint  -mo $footControl $reverseFoot[0];

	// return the new control names
	$footControls[0] = $footControl;
	$footControls[1] = $toeControl;
	parent $footControl $parent;
	parent $reverseFoot[0] $parent;

	vstDisplayExp( $footControls[0], ( $side + "LegIKFK" ) );
	vstDisplayExp( $footControls[1], ( $side + "LegIKFK" ) );
	vstInfoAttr( ( $side + "FootControl"), $footControls[0], $vstInfo );
	vstInfoAttr( ( $side + "ToeControl"), $footControls[1], $vstInfo );
	vstHideChannels( $footControls[0], { ".sx", ".sy", ".sz", ".v" } );
	vstSelectHandle( $footControls[0], 0, 0, 0 );
	vstHideChannels( $footControls[1], { ".tx", ".ty", ".tz", ".sx", ".sy", ".sz", ".v" } );
	vstSelectHandle( $footControls[1], 0, 0, 0 );
	vstAddPlotted( $footControls[0] );
	vstAddPlotted( $footControls[1] );

	return $footControls;
}