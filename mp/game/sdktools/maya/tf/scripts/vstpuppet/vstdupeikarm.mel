//*****************************************
//
//	vstDupeIKarm
//	-makes a dupliacte three bone arm
//
//	use: vstDupeIKarm( side, joint1, joint2, joint3, type, vstInfo )
//	for example to make a duplicate right arm you would call this:
//	vstDupeIKarm( "R", "upperarm", "lowerarm", "wrist", "FK", vstInfo )
//
// 	by: steve/wade
//	stevek@valvesoftware.com
//	wade@valvesoftware.com
//	3/07/2006
//	5/18/2006
//		-passed in the vstInfo node so that channels can be locked/hidden/added to plotted
//
//******************************************

global proc string[] vstDupeIKarm( string $side, string $arm[], string $parent, string $vstInfo )
{
	$type = "IK";
	string $dupeArm[];
	select -cl;
	// name the new joints
	string $newUp =  $arm[0] + $type;
	string $newMid = $arm[1] + $type;
	string $newEnd = $arm[2] + $type;

	// make the new joints at the origin
	joint -n $newUp;
	joint -n $newMid;
	joint -n $newEnd;
	select -cl;

	// now stick/unstick them to the "real" skeleton
	delete `parentConstraint $arm[0] $newUp`;
	delete `parentConstraint $arm[1] $newMid`;
	delete `parentConstraint $arm[2] $newEnd`;

	// zero out the rotations
	makeIdentity -apply true -r 1 $newUp;
	makeIdentity -apply true -r 1 $newMid;
	makeIdentity -apply true -r 1 $newEnd;

	// point constrain the new upper joint to the skeleton
	pointConstraint $arm[0] $newUp;

	// hide these bones
	string $vis = $newUp + ".visibility";
	setAttr $vis 0;
	string $switchAttr = ( "main." + $side + "ArmIKFK" );

	// set up the constraints to drive the real skeleton
	string $upArmCons[] = `orientConstraint -mo -w 1 $newUp  $arm[0]`;
	// maya does not return the new attr name (and that is what we end up controlling)
	// so get the name by finding out what the last attr added to the object was
	string $num[] = `listAttr -v $upArmCons[0]`;
	int $size = size( $num );
	string $upArmConsAttr = $num[( $size -1 )];
	string $lowArmCons[] = `orientConstraint -mo -w 1 $newMid $arm[1]`;
	string $num[] = `listAttr -v $lowArmCons[0]`;
	int $size = size( $num );
	string $lowArmConsAttr = $num[( $size -1 )];
 	string $upWeight = 	$upArmCons[0] + "." + $upArmConsAttr;
	string $lowWeight = $lowArmCons[0] + "." + $lowArmConsAttr;

	// hook up the constraint weights to the main ik/fk switch
	connectAttr $switchAttr $upWeight;
	connectAttr $switchAttr $lowWeight;

	// set the chains neutral pose
	select $newUp;
	joint -e -spa -ch;
	select -cl;

	// parent them to the main control
	parent $newUp $parent;

	// return all the new joints
	$dupeArm[0] = $newUp;
	$dupeArm[1] = $newMid;
	$dupeArm[2] = $newEnd;

	vstInfoAttr( ($side + "IKshoulder"), $dupeArm[0], $vstInfo);
	vstInfoAttr( ($side + "IKelbow"), $dupeArm[1], $vstInfo);
	vstInfoAttr( ($side + "IKwrist"), $dupeArm[2], $vstInfo);

	return $dupeArm;
}