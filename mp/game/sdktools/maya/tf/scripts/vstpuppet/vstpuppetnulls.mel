global proc vstPuppetNulls(string $flag, string $option)
{
	// get the creature type
	string $APnodes[] = `ls "AP_*"`;
	string $buffer[];
	// TODO: there should only be one AP node in the scene, so put in a check for that
	string $puppetInfo = $APnodes[0];
	tokenize ($puppetInfo, "_", $buffer);
	string $creatureType = $buffer[1];	
		
	switch ($flag)
	{
		case "-write":
		case "-w":
			// get the control nodes
			string $buf[] = `ls "AP_*"`;
			string $puppetInfo = $buf[0];
			string $controlNodes[] = `vstGetPuppetControlNames $puppetInfo`;

			// write the file to the filename
			vstWritePuppetLocatorFile $creatureType $controlNodes $option;
			break;

		case "-create":
		case "-c":
		default:
			// source the locator file directory
			$templateDir = `vstGetTemplateDir`;
			evalEcho( "source \"" + $templateDir + "locators_" + $option + ".mel" + "\"");
		
			// frame viewport.
			select -all; fitAllPanels -selected; select -cl;
			break;

// TODO: talk to bay about whether we still need these commands
////		case "-query":
////		case "-q":
////			print ("// create the puppetInfoNode\n");
////			print ("string $creatureInfo = \"AP_" + $creatureType + "\" ;\n");
////			print ("createNode transform -n  $creatureInfo ;\n");
////			print "\n";
////		
////			string $selected[] = `ls -sl`;
////			for ($sel in $selected)
////			{
////				// VARIABLES
////				float  $hipPos[3];
////				string $side = "C";
////				string $buf[];
////				tokenize ($sel, "_", $buf);
////				if (`gmatch $buf[1] "R"`)
////				{
////					$side = "R";
////				}	
////				if (`gmatch $buf[1] "L"`)
////				{
////					$side = "L";
////				}	
////				if ((!`gmatch $buf[1] "L"`) && (!`gmatch $buf[1] "R"`))
////				{
////					$side = "C";
////				}
////			
////				// get the positions of the locators
////				$hipPos = `xform -q -ws -rp  ($sel )`;
////				print ("// create " + $sel + "\n");
////				print ("createNode transform -n " + $sel + ";\n") ;
////				print ("xform -t " + " " + $hipPos[0] + " " + $hipPos[1] + " " + $hipPos[2] + " " + $sel + ";\n") ;
////				print ("addAttr -ln " + $sel + " -at \"message\" $creatureInfo ;\n") ;
////				print ("connectAttr -f " + $sel + ".message ( $creatureInfo + \".\" + " + "\"" + $sel + "\"" + ");\n" );
////				print ("setAttr " + $sel + ".displayHandle" + " 1;\n");
////				print ("brAssign_LR_layer " + $sel + " " + $side + ";\n");
////				print "\n";
////			}
////			break;

////		case "-saveTemplate":
////		case "-st":
////			if (`gmatch $option "selected"`)
////			{
////				string $templateDir = `vstGetTemplateDir`;
////
////				// get the selected nodes
////				string $selected[] = `ls -sl`;
////				if (!`size($selected)`) 
////				{
////					error "you must have locators selected";
////				}
////				else
////				{
////					string $text;
////					string $result = `promptDialog
////						-title "Select Creature Template Name"
////						-message "Enter Creature Type"
////						-text $creatureType
////						-button "OK" -button "Cancel"
////						-defaultButton "OK" -cancelButton "Cancel"
////						-dismissString "Cancel"`;
////					if ($result == "OK") 
////					{
////						string $newCreatureType = `promptDialog -q -tx`;
////						string $newTemplateFile = ($templateDir + "locators_" + $newCreatureType + ".mel");
////						if (`filetest -f $newTemplateFile`)
////						{
////						    string $text;
////						    string $result = `promptDialog
////						    	-title "WARNING!"
////						    	-message "Overwrite Existing Template File?"
////						    	-text ("locators_" + $creatureType + ".mel")
////						    	-button "OK" -button "Cancel"
////						    	-defaultButton "OK" -cancelButton "Cancel"
////						    	-dismissString "Cancel"`;
////						    if ($result == "OK") 
////						    {
////						    	brWritePuppetLocatorFile $newCreatureType $selected $newTemplateFile;
////						    }
////						}
////						else
////						{	
////							brWritePuppetLocatorFile $newCreatureType $selected $newTemplateFile;
////						}
////					}
////				}
////			}
////			if (`gmatch $option "fromNode"`)
////			{
////				string $templateDir = `vstGetTemplateDir`;
////
////				// get the control nodes
////				string $buf[] = `ls "AP_*"`;
////				string $puppetInfo = $buf[0];
////				string $controlNodes[] = `vstGetPuppetControlNames $puppetInfo`;
////
////				string $templateFile = ($templateDir + "locators_" + $creatureType + ".mel");
////
////				if (`filetest -f $templateFile`)
////				{
////				    string $text;
////				    string $result = `promptDialog
////				    	-title "WARNING!"
////				    	-message "Overwrite Existing Template File?"
////				    	-text ("locators_" + $creatureType + ".mel")
////				    	-button "OK" -button "Cancel"
////				    	-defaultButton "OK" -cancelButton "Cancel"
////				    	-dismissString "Cancel"`;
////				    if ($result == "OK") 
////				    {
////				    	$newFile = `promptDialog -q -tx`;
////				    	brWritePuppetLocatorFile $creatureType $controlNodes $templateFile;
////				    }
////				}
////				else
////				{
////					brWritePuppetLocatorFile $creatureType $controlNodes $templateFile;
////				}
////			}
////			break;
	}
}
