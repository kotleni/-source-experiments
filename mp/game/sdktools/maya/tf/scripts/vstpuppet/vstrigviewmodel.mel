//*****************************************
//
//	vstRigBiped
// by: steve/wade
//	stevek@valvesoftware.com
//	wade@valvesoftware.com
//	04-12-06
//
// usage: vstRigBiped $namespace;
//		$namespace - string to use as the reference namespace. Pass in "" if there is no reference.
//
//******************************************

//global proc string vstRigViewmodel( string $namespace, string $infoNode, string $hands )
global proc string vstRigViewmodel( string $namespace, string $infoNode, string $hands )
{
	// define what some of the rig objects will be called
	string $vstInfo = ( $namespace + $infoNode );

	string $main = "main";
	string $upperBodyControl = "UpperbodyControl";
	string $handControl = "ikHandControl";
	string $elbowControl = "ElbowControl";

	string $root = ( $namespace + $hands + "root" );

	// these are channel names that we hide on controls that don't need them
	string $scale[] = { ".sx", ".sy", ".sz" };
	string $translation[] = { ".tx", ".ty", ".tz" };
	string $rotation[] = { ".rx", ".ry", ".rz" };
	string $vis[] = { ".v" };
	// fyi this is the bone radius
	string $rad[] = { ".radius" };

	// make the main control
	// this is the parent to the entire rig - it currently stores the IKFK switches as well
	print ( "*\n* Making main control\n*------------------------\n" );
	// get the distance between the two legs to figure out the size of the circle controls
	float $radius = 10;
	float $mainRadius = ( $radius * 2 );
	// create the main control
	// TODO: should vastMakeMain return the name of the control in case there is an object named "main" already in the scene?
	vstMakeMain( $main, $mainRadius, $vstInfo );
	// add the plotted group to the vstInfo node
	vstInfoAttr( "plotted", "plotted", $vstInfo );

	print ( "*\n* Making Upperbody Control\n*------------------------\n" );
	vstUpperBodyControl( $upperBodyControl, $root, $main, $radius, 0.25, "y", $vstInfo );

	// do all the right/left controls
	string $sides[] = { "L", "R" };
	for ( $side in $sides )
	{
		// now define the skeleton
		string $bipUpArm =  ( $namespace + $hands + "bip_upperArm_" + $side );
		string $bipLowArm = ( $namespace + $hands + "bip_lowerArm_" + $side );
		string $bipHand =   ( $namespace + $hands + "bip_hand_" + $side);
		string $bipArmBones[] = {$bipUpArm, $bipLowArm, $bipHand};

		// some of the scripts expect the "r" or "l" instead of "R" "L"
		string $sideLower = `tolower( $side )`;

		print ( "*\n*Rigging Arms: " + $side + "\n*------------------------\n" );
		string $rigFKarm[] = vstDupeFKarm( $sideLower, $bipArmBones, $main, 4.5, $vstInfo );
		string $rigIKarm[] = vstDupeIKarm( $sideLower, $bipArmBones, $main, $vstInfo );
		// make the IK handle/control
		string $IKhandle = vstIK( $rigIKarm[0], $rigIKarm[2], $main );
		string $IKcontrol = vstIKhandControl( $sideLower, $IKhandle, $handControl, $main, 4, $bipHand, $bipLowArm, $vstInfo );
		// set up the FK controls
		string $FKelbow[] = `listConnections( $vstInfo + "." + $sideLower + "FKelbow" )`;
		string $ElbowControl = vstPoleControl( $sideLower, $elbowControl, $FKelbow[0], $bipHand, $IKhandle, $main, $vstInfo );

		print ( "*\n*Adding Hand Control: " + $side + "\n*------------------------\n" );
		string $fingerNames[] = { ( $namespace + $hands + "bip_thumb" ), ( $namespace + $hands + "bip_index" ), ( $namespace + $hands + "bip_middle" ), ( $namespace + $hands + "bip_ring" ), ( $namespace + $hands + "bip_pinky" ) };
		string $fingerControl[] = vstFingerControl( $side, $fingerNames, $bipHand, ".rx", 3, 2, $main, $rigFKarm[2], $IKcontrol );
	}


	print ( "*\nDone with Rig.\n**************************\n" );
	select -cl;

	setAttr "lElbowControl.translateZ" -20;
	setAttr "rElbowControl.translateZ" -20;

	return $vstInfo;
}