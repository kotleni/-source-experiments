//*****************************************
//
//	vstIKcontrol
// by: steve
//	stevek@valvesoftware.com
//
// makes a sphere that controls an IK handle
//
// use: vstIKcontrol(side, IKhandle, controlname, endbone, pelvisControl, 2)
//
//******************************************

global proc string vstIKcontrol (string $side, string $IKhandle, string $name, string $parent, int $radius, string $bone)
{
	string $sphereName = $side + $name;
	sphere -r $radius -d 1 -s 4 -nsp 3 -name $sphereName -ch 0 -po 0;
	select $sphereName;
	select $sphereName;
	string $rotateX = ($sphereName + ".rotateX");
	setAttr $rotateX -45;
	makeIdentity -apply true -r 1 -t 0 -s 0 -n 0;

	addAttr -ln "lock" -at double -k 1 -min 0 -max 1 -dv 0;
	vstSetDisplay ($side, $sphereName);
	delete `pointConstraint   $bone $sphereName`;
	delete `orientConstraint   $bone $sphereName`;

	makeIdentity -apply true -r 0 -t 1 -s 0 -n 0;
	
	pointConstraint  $sphereName $IKhandle;
	//parent $sphereName $parent;
	//ok now we have to do something funky
	//we want to be able to toggle the parent of the control so we can efectively "lock" it in space
	
	$groupName = ($sphereName + "Group");
	string $group = `group -n $groupName $sphereName`;
	parent $group $parent;
	
	//zero out the rotation on the control 
	 	float $pos[] = `getAttr ($sphereName + ".translate")`;
	//get the rotations of the object
	string $letters[] = {"X", "Y", "Z"};
	for ($letter in $letters)
	{
		string $rotate = ($sphereName + ".rotate" + $letter);

		string $groupRotate = ($group + ".rotate" + $letter);

		float $objRotate = `getAttr $rotate`;
		setAttr $groupRotate $objRotate;
		setAttr $rotate 0;
		
	}
	string $wooHoo[] = `parentConstraint -mo "UpperbodyControl" $group`;
	
	
	//check and see what the new attr is called
	string $lockExp = ($wooHoo[0] + ".UpperbodyControlW0 = 1 - " +  $sphereName + ".lock");
	expression -s $lockExp -n ($sphereName + "lockExp");

	return $sphereName;

}