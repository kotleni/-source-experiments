//*****************************************
//
//	vstDupeFKleg
//	-makes a duplicate Leg
//
//	use: vstDupeFKLeg( side, joint1, joint2, joint3, joint 4, joint 5, type, vstInfo )
//	for example to make a duplicate right leg you would call this:
//	vstDupeFKLeg( "R", "upperleg", "lowerleg", "ankle" "toe", "toe_end", "FK", vstInfo )
//
// 	by: steve/wade
//	stevek@valvesoftware.com
//	wade@valvesoftware.com
//	3/07/2006
//	5/18/2006
//		-passed in the vstInfo node so that channels can be locked/hidden/added to plotted
//
//******************************************

global proc string[] vstDupeFKleg( string $side, string $leg[], string $parent, float $radius, string $vstInfo )
{
	string $type = "FK";
	string $dupeLeg[];
	select -cl;
	// name the new joints
	string $newUp =  $leg[0] + $type;
	string $newKnee = $leg[1] + $type;
	string $newAnkle = $leg[2] + $type;
	string $newToe =  $leg[3] + $type;
	string $newEnd= $leg[4] + $type;

	// make the new joints at the origin
	vstBoneToCylinder( $leg[0], $leg[1], $radius, $newUp );
	parent $newUp $parent;
	vstBoneToCylinder( $leg[1], $leg[2], $radius, $newKnee );
	parent $newKnee $newUp;
	vstBoneToCylinder( $leg[2], $leg[3], $radius, $newAnkle );
	parent $newAnkle $newKnee;
	vstBoneToCylinder( $leg[3], $leg[4], $radius, $newToe );
	parent $newToe $newAnkle;

	// now stick/unstick them to the "real" skeleton
	delete `parentConstraint  $leg[0] $newUp`;
	delete `parentConstraint  $leg[1] $newKnee`;
	delete `parentConstraint  $leg[2] $newAnkle`;
	delete `parentConstraint  $leg[3] $newToe`;

	// zero out the rotations
	vstMakeZero $newUp;
	vstMakeZero $newKnee;
	vstMakeZero $newAnkle;
	vstMakeZero $newToe;

	// point constrain the new upper joint to the skeleton
	pointConstraint $leg[0] $newUp;

	// set it's display color
	vstSetDisplay ( $side, $newUp );

	// set up the constraints to drive the real skeleton
	string $upLegCons[] = `orientConstraint $newUp $leg[0]`;
	// get the constraint attr name
	string $num[] = `listAttr -v $upLegCons[0]`;
	int $size = size( $num );
	string $upLegConsAttr = $num[( $size -1 )];

	string $lowLegCons[] = `orientConstraint $newKnee $leg[1]`;
	string $num[] = `listAttr -v $lowLegCons[0]`;
	int $size = size( $num );
	string $lowLegConsAttr = $num[( $size -1 )];

	string $footCons[] = `orientConstraint $newAnkle $leg[2]`;
	string $num[] = `listAttr -v $footCons[0]`;
	int $size = size( $num );
	string $footConsAttr = $num[( $size -1 )];

	string $toeCons[] = `orientConstraint $newToe $leg[3]`;
	string $num[] = `listAttr -v $toeCons[0]`;
	int $size = size( $num );
	string $toeConsAttr = $num[( $size -1 )];

 	string $upWeight = 	$upLegCons[0] + "." + $upLegConsAttr;
	string $lowWeight = $lowLegCons[0] + "." + $lowLegConsAttr;
	string $ankleWeight = $footCons[0] + "." + $footConsAttr;
	string $toeWeight = $toeCons[0] + "." + $toeConsAttr;

	// hook up the constraint weights to the main ik/fk switch
	string $switchAttr = ("main." + $side + "LegIKFK");
	string $visAttr = ($newUp + ".visibility");
	int $isFK = `gmatch $newUp "*FK*"`;

	if ( $isFK )
	{
		// set up expressions to set up the FK as the opposite of the IK weight
		string $FKupLegExp = ( $upWeight + "= 1 - "+ $switchAttr);
		expression -s $FKupLegExp -n ( $newUp + "switchExp" );

		string $FKlowLegExp = ( $lowWeight + "= 1 - "+ $switchAttr);
		expression -s $FKlowLegExp -n ( $newKnee + "switchExp" );

		string $FKankleExp = ( $ankleWeight + "= 1 - "+ $switchAttr);
		expression -s $FKankleExp -n ( $newAnkle + "switchExp" );

		string $FKtoeExp = ( $toeWeight + "= 1 - "+ $switchAttr );
		expression -s $FKtoeExp -n ( $newToe + "switchExp" );

		// set up visibility expressions, only show FK bones when they have a value
		string $visExp = "if(" + $switchAttr + "==1)\r\n" + $visAttr + "=0;\r\nelse\r\n" + $visAttr + "=1;";
		expression -s $visExp -n ( $newUp + "visExp" );
	}
	else
	{
		string $IKupLegExp = ( $upWeight + "=" + $switchAttr + "/10" );
		string $IKlowLegExp = ( $lowWeight + "=" + $switchAttr + "/10" );
		string $IKankleExp = ( $ankleWeight + "=" + $switchAttr + "/10" );
		string $IKtoeExp = 	( $toeWeight + "=" + $switchAttr + "/10" );

		expression -s $IKupLegExp;
		expression -s $IKlowLegExp;
		expression -s  $IKankleExp;
		expression -s  $IKtoeExp;
	}

	$dupeLeg[0] = $newUp;
	$dupeLeg[1] = $newKnee;
	$dupeLeg[2] = $newAnkle;
	$dupeLeg[3] = $newToe;

	vstInfoAttr( ( $side + "FKupLeg" ), $dupeLeg[0], $vstInfo );
	vstInfoAttr( ( $side + "FKknee" ), $dupeLeg[1], $vstInfo );
	vstInfoAttr( ( $side + "FKankle" ), $dupeLeg[2], $vstInfo );
	vstInfoAttr( ( $side + "FKtoe" ), $dupeLeg[3], $vstInfo );

	for ( $d in $dupeLeg )
	{
		vstHideChannels( $d, { ".tx", ".ty", ".tz", ".sx", ".sy", ".sz", ".v" } );
		vstSelectHandle( $d, 0, 0, 0 );
		vstAddPlotted( $d );
	}
	vstHideChannels( $dupeLeg[1], {".ry", ".rz"} );

	return $dupeLeg;

}