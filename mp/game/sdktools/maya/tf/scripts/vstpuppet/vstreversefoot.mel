//*****************************************
//
//	vstReverseFoot           
//	by: steve             
//	stevek@valvesoftware.com             
//             
// makes a cross reverse foot         
//******************************************

global proc string[] vstReverseFoot (string $side, string $ankle, string $toe, string $toeEnd)
{
	string $revFoot[];
	select -cl;
	string $revControl = ($side + "ReverseControl");
	string $revLroll = ($side + "ReverseLroll");
	string $revRroll = ($side + "ReverseRroll");
	string $revBall = ($side + "ReverseBall");
	string $revHeelLift = ($side + "ReverseHeelLift");
	string $revToeLift = ($side + "ReverseToeLift");
	string $revAnkleLift = ($side + "ReverseAnkleLift");
	string $revAnkleBank = ($side + "ReverseAnkleBank");
	string $revAnkleEnd = ($side + "ReverseAnkleEnd");
	string $revToeWiggle = ($side + "ReverseToeWiggle");
	string $revToeWiggleEnd = ($side + "ReverseToeWiggleEnd");

	//define the guide bones
	string $rearGuide = ($side + "FootGuideRear");
	string $centerGuide = ($side + "FootGuideCenter");
	string $frontGuide = ($side + "FootGuideFront");
	string $leftGuide = ($side + "FootGuideLeft");
	string $rightGuide = ($side + "FootGuideRight");

//make the reverse foot
//version 2.0 make new and improved reverse cross foot to allow for side of the foot rotation
//switching this to use groups instead of bones

	createNode "transform" -n $revControl;
	duplicate -n $revBall $revControl;
		parent $revBall $revControl;
	duplicate -n $revLroll  $revBall;
		parent $revLroll $revBall;
	duplicate -n $revRroll $revLroll;
		parent $revRroll $revLroll;
	duplicate -n $revHeelLift $revRroll;
		parent $revHeelLift $revRroll;
	duplicate -n $revToeLift $revHeelLift;
		parent $revToeLift $revHeelLift;		
	duplicate -n $revAnkleLift $revToeLift;
		parent $revAnkleLift $revToeLift;	
	duplicate -n $revAnkleEnd $revAnkleLift;
		parent $revAnkleEnd $revAnkleLift;	
	createNode "transform" -n $revToeWiggle;
		parent $revToeWiggle $revHeelLift;	
	duplicate -n $revToeWiggleEnd $revToeWiggle;
		parent $revToeWiggleEnd $revToeWiggle;	

//stick everything to the right place
	delete 	`parentConstraint   $ankle $revControl`;
	delete 	`parentConstraint 	$centerGuide $revBall`;
	delete	`parentConstraint   $leftGuide $revLroll`;
	delete 	`parentConstraint   $rightGuide $revRroll`;
	delete 	`parentConstraint 	$rearGuide $revHeelLift`;
	delete 	`parentConstraint 	$frontGuide $revToeLift`;
	delete	`parentConstraint 	$toe $revAnkleLift`;
	delete	`parentConstraint   $ankle $revAnkleEnd`;
	delete 	`parentConstraint 	$revAnkleLift $revToeWiggle`;
	delete 	`parentConstraint 	$revToeLift $revToeWiggleEnd`;
	select -cl;

//zero out the main controls
	select $revControl;
		//makeIdentity -apply true -t 1 -r 0 -s 1 -n 0;
	select -cl;
	select $revToeWiggle;
		//makeIdentity -apply true -t 1 -r 0 -s 1 -n 0;
	select -cl;
	

	//return all the new controls that were made
	$revFoot[0] = $revControl;
	$revFoot[1] = $revLroll;
	$revFoot[2] = $revRroll;
	$revFoot[3] = $revBall;
	$revFoot[4] = $revHeelLift;
	$revFoot[5] = $revToeLift; 
	$revFoot[6] = $revAnkleLift; 
	$revFoot[7] = $revAnkleEnd;
	$revFoot[8] = $revToeWiggle;
	$revFoot[9] = $revToeWiggleEnd;
//zero out all the rotations, this keeps the axis aligned but sets the value to zero
//makes all the bones line up nice and clean when the foot is rigged at an odd angle	
	for ($foot in $revFoot)
		vstMakeZero ($foot);

//we want to make sure the zero group is the top parent returned
	$revFoot[0] = $revControl + "ZeroGroup";

return $revFoot;
}