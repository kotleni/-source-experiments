//usage:  
//
//	to return the locations of the selected objects:
//		brCreatePuppetNulls -query;
//
//	to create basic human locators
//		brCreatePuppetNulls -create human;

// define the template directory
global string $templateDir = "U:/dev/main/content/arttools/maya/7.0/modules/autopuppet/scripts/templates/";

global proc brHideAttrsv (string $node)
{
	string $nonKeyAttrs[] = {"sx" , "sy" , "sz" , "v"};
	for ($attr in $nonKeyAttrs ) 
	{ 
		setAttr -edit -keyable false ($node + "." + $attr);
	}
}

global proc brWritePuppetLocatorFile (string $name, string $controls[], string $file)
{
	// open  file for writing
	$fileId = `fopen $file "w"`;
	
	// create the AP_creature info node
	fprint $fileId ("// create the puppetInfoNode\n");
	fprint $fileId ("string $creatureInfo = \"AP_" + $name + "\" ;\n");
	fprint $fileId ("createNode transform -n  $creatureInfo ;\n");
	fprint $fileId ("\n");
	
	for ($sel in $controls)
	{
		// VARIABLES
		float  $hipPos[3];
		string $side = "C";
		string $buf[];
		tokenize ($sel, "_", $buf);
		if (`gmatch $buf[1] "R"`)
		{
			$side = "R";
		}	
		if (`gmatch $buf[1] "L"`)
		{
			$side = "L";
		}	
		if ((!`gmatch $buf[1] "L"`) && (!`gmatch $buf[1] "R"`))
		{
			$side = "C";
		}
		
		// get the positions of the locators
		$hipPos = `xform -q -ws -rp  ($sel )`;
		fprint $fileId  ("// create " + $sel + "\n");
		fprint $fileId  ("createNode transform -n " + $sel + ";\n") ;
		fprint $fileId  ("xform -t " + " " + $hipPos[0] + " " + $hipPos[1] + " " + $hipPos[2] + " " + $sel + ";\n") ;
		fprint $fileId  ("addAttr -ln " + $sel + " -at \"message\" $creatureInfo ;\n") ;
		fprint $fileId  ("connectAttr -f " + $sel + ".message ( $creatureInfo + \".\" + " + "\"" + $sel + "\"" + ");\n" );
		fprint $fileId  ("setAttr " + $sel + ".displayHandle" + " 1;\n");
		fprint $fileId  ("brAssign_LR_layer " + $sel + " " + $side + ";\n");
		fprint $fileId  ("brHideAttrsv " + $sel + " " + ";\n");
		fprint $fileId  "\n";
	}
	fclose $fileId;
	print ("wrote " + $file +"\n");

}

//ws: only -w and -c are currently called from the other puppet scripts
global proc brCreatePuppetNulls ( string $flag, string $option )
{
	// get the creature typestring $buf[];
	string $bufA[] = `ls "AP_*"`;
	string $bufB[];
	string $tmp;
	string $puppetInfo = $bufA[0];
	tokenize ($puppetInfo, "_", $bufB);
	string $creType = $bufB[1];	
		
	if ((`gmatch $flag "-query"`) || (`gmatch $flag "-q"`))
	{
		print ("// create the puppetInfoNode\n");
		print ("string $creatureInfo = \"AP_" + $creType + "\" ;\n");
		print ("createNode transform -n  $creatureInfo ;\n");
		print "\n";
		
		string $selected[] = `ls -sl`;
		for ($sel in $selected)
		{
			// VARIABLES
			float  $hipPos[3];
			string $side = "C";
			string $buf[];
			tokenize ($sel, "_", $buf);
			if (`gmatch $buf[1] "R"`)
			{
				$side = "R";
			}	
			if (`gmatch $buf[1] "L"`)
			{
				$side = "L";
			}	
			if ((!`gmatch $buf[1] "L"`) && (!`gmatch $buf[1] "R"`))
			{
				$side = "C";
			}
			
			// get the positions of the locators
			$hipPos = `xform -q -ws -rp  ($sel )`;
			print ("// create " + $sel + "\n");
			print ("createNode transform -n " + $sel + ";\n") ;
			print ("xform -t " + " " + $hipPos[0] + " " + $hipPos[1] + " " + $hipPos[2] + " " + $sel + ";\n") ;
			print ("addAttr -ln " + $sel + " -at \"message\" $creatureInfo ;\n") ;
			print ("connectAttr -f " + $sel + ".message ( $creatureInfo + \".\" + " + "\"" + $sel + "\"" + ");\n" );
			print ("setAttr " + $sel + ".displayHandle" + " 1;\n");
			print ("brAssign_LR_layer " + $sel + " " + $side + ";\n");
			print "\n";
		}
	}
	if ((`gmatch $flag "-write"`) || (`gmatch $flag "-w"`))
	{
		// get the control nodes
		string $buf[] = `ls "AP_*"`;
		string $puppetInfo = $buf[0];
		string $controlNodes[] = `listAttr -ud $puppetInfo`;

		// write the file to the filename
		brWritePuppetLocatorFile $creType $controlNodes $option;
	}
	
	if ((`gmatch $flag "-create"`) || (`gmatch $flag "-c"`))
	{
		// source the locator file directory
		global string $templateDir;
		evalEcho( "source \"" + $templateDir + "locators_" + $option + ".mel" + "\"");
		
		// frame viewport.
		select -all; fitAllPanels -selected ; select -cl;
	}
	
	
	if ((`gmatch $flag "-saveTemplate"`) || (`gmatch $flag "-st"`))
	{
		if (`gmatch $option "selected"`)
		{
			global string $templateDir;
			
			// get the selected nodes
			string $selected[] = `ls -sl`;
			if (!`size($selected)`) 
			{
				error "you must have locators selected";
			}
			else
			{
				string $text;
				string $result = `promptDialog
					-title "Select Creature Template Name"
					-message "Enter Creature Type"
					-text $creType
					-button "OK" -button "Cancel"
					-defaultButton "OK" -cancelButton "Cancel"
					-dismissString "Cancel"`;
				if ($result == "OK") 
				{
					string $newCreatureType = `promptDialog -q -tx`;
					string $newTemplateFile = ($templateDir + "locators_" + $newCreatureType + ".mel");
					if (`filetest -f $newTemplateFile`)
					{
					    string $text;
					    string $result = `promptDialog
					    	-title "WARNING!"
					    	-message "Overwrite Existing Template File?"
					    	-text ("locators_" + $creType + ".mel")
					    	-button "OK" -button "Cancel"
					    	-defaultButton "OK" -cancelButton "Cancel"
					    	-dismissString "Cancel"`;
					    if ($result == "OK") 
					    {
					    	brWritePuppetLocatorFile $newCreatureType $selected $newTemplateFile;
					    }
					}
					else
					{	
						brWritePuppetLocatorFile $newCreatureType $selected $newTemplateFile;
					}
				}
			}
		}
		if (`gmatch $option "fromNode"`)
		{
			global string $templateDir;
			
			// get the control nodes
			string $buf[] = `ls "AP_*"`;
			string $puppetInfo = $buf[0];
			string $controlNodes[] = `listAttr -ud $puppetInfo`;
			
			string $templateFile = ($templateDir + "locators_" + $creType + ".mel");
			
			if (`filetest -f $templateFile`)
			{
			    string $text;
			    string $result = `promptDialog
			    	-title "WARNING!"
			    	-message "Overwrite Existing Template File?"
			    	-text ("locators_" + $creType + ".mel")
			    	-button "OK" -button "Cancel"
			    	-defaultButton "OK" -cancelButton "Cancel"
			    	-dismissString "Cancel"`;
			    if ($result == "OK") 
			    {
			    	$newFile = `promptDialog -q -tx`;
			    	brWritePuppetLocatorFile $creType $controlNodes $templateFile;
			    }
			}
			else
			{
				brWritePuppetLocatorFile $creType $controlNodes $templateFile;
			}	
		}
	}
}

//ws:checked
global proc brGetChosen( string $windowName )
{
	string $chosen[];
	$chosen = `textScrollList -q -si chooserUiTextList`;
	deleteUI $windowName;
	brCreatePuppetNulls -c $chosen[0];
}

//ws:checked
global proc brChooser( string $chooserList[] )
{	
	string $windowName = "AutoPuppet";
	if ( `window -ex $windowName` )
	{
		deleteUI $windowName;
	}

	window -h 240 -w 175 -s 0 $windowName;
	frameLayout -borderVisible false -labelVisible false;
	columnLayout -adj 1;
	textScrollList -dcc ( "brGetChosen " + $windowName ) -height 185  -numberOfRows 8 -allowMultiSelection 0 chooserUiTextList;

	for( $c in $chooserList )
	{
		textScrollList -e -append $c chooserUiTextList;
	}
	// select an item so if the "Choose Puppet" button is pressed before the user makes a selection it won't error
	// remember that the textScrollList uses a 1-based index
	textScrollList -e -sii 1 chooserUiTextList;
	button -label "Choose Puppet" -ann "choose items" -c ( "brGetChosen " + $windowName ) chooseUiButton;
	setParent ..;
	showWindow $windowName;
}

//ws:checked
global proc brAutoPuppet()
{
	// get the currently supported creature types from the script template directory
	global string $templateDir;
	string $dirList[] = `getFileList -fld $templateDir -fs "locators_*.mel"`;
	string $characterList[];

	for ( $d in $dirList )
	{
		string $buffer[];
		tokenize $d  "_."  $buffer;
		$characterList[size( $characterList )] = $buffer[1];
	}
	brChooser $characterList;	
}
