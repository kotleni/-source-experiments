// Make the footguides here, since i don't want to check in a separate maya file.
// These values should be moved into an attribute on the foot, or use attachments?
proc string[] spyFootGuides()
{
	string $guideRight = `createNode joint -n "rFootGuideCenter"`;
		setAttr ".t" -type "double3" -10.024935614908225 0 1.285726255832901 ;
		setAttr ".r" -type "double3" 0 -19.047933 0 ;
	createNode joint -n "rFootGuideRight" -p "rFootGuideCenter";
		setAttr ".t" -type "double3" 1.2692660549012853 -0.035195030272006989 -0.9674417221884668 ;
	createNode joint -n "rFootGuideRear" -p "rFootGuideCenter";
		setAttr ".t" -type "double3" -1.0955341700892562 0 -8.9758023954418906 ;
	createNode joint -n "rFootGuideLeft" -p "rFootGuideCenter";
		setAttr ".t" -type "double3" -2.0435369214668917 0.001630968414247036 -0.32014433666886122 ;
	createNode joint -n "rFootGuideFront" -p "rFootGuideCenter";
		setAttr ".t" -type "double3" 0.53691716656609145 0 4.3990069149784485 ;
	string $guideLeft = `createNode joint -n "lFootGuideCenter"`;
		setAttr ".t" -type "double3" 10.024935614908225 0 1.285726255832901 ;
		setAttr ".r" -type "double3" 0 -6.455275624582371 0 ;
	createNode joint -n "lFootGuideRight" -p "lFootGuideCenter";
		setAttr ".t" -type "double3" 1.7065752114246706 0.001630968414247036 -1.1688184604335969 ;
	createNode joint -n "lFootGuideRear" -p "lFootGuideCenter";
		setAttr ".t" -type "double3" -2.8758496099183759 0 -8.5729057373206796 ;
	createNode joint -n "lFootGuideLeft" -p "lFootGuideCenter";
		setAttr ".t" -type "double3" -1.5621335567644206 -0.035195030272006989 -0.32667805984821496 ;
	createNode joint -n "lFootGuideFront" -p "lFootGuideCenter";
		setAttr ".t" -type "double3" 1.40944305178704 0 4.2015487817649815 ;
	
	return { $guideRight, $guideLeft };
}

// $namespace should include the ":"
//global proc tfRigSpy( string $namespace )
global proc tfRigSpy()
{
	string $namespace = "Ref:";
	// Make the joints that are used for the foot attributes.
	$footGuides = `spyFootGuides`;

	string $vstInfo = `vstRigBiped $namespace "spyInfo"`;
	string $checkInfo[] = { "main", "pelvisControl", "headControl", "fkSpine1", "fkSpine2", "fkSpine3", "ikSpine1", "ikSpine2", "ikSpine3", "chestParent" };
	string $main;
	string $pelvisControl;
	string $headControl;
	string $fkSpine1;
	string $fkSpine2;
	string $fkSpine3;
	string $ikSpine1;
	string $ikSpine2;
	string $ikSpine3;
	string $chestParent;

	for ( $c in $checkInfo )
	{
		string $connections[] = `listConnections ( $vstInfo + "." + $c )`;
		if ( size( $connections ) > 1 )
		{
			error ( "More than one connection found: " + $vstInfo + "." + $c );
		}

		switch ( $c )
		{
			case "main":
				$main = $connections[0];
				break;
			case "pelvisControl":
				$pelvisControl = $connections[0];
				break;
			case "headControl":
				$headControl = $connections[0];
				break;
			case "fkSpine1":
				$fkSpine1 = $connections[0];
				break;
			case "fkSpine2":
				$fkSpine2 = $connections[0];
				break;
			case "fkSpine3":
				$fkSpine3 = $connections[0];
				break;
			case "ikSpine1":
				$ikSpine1 = $connections[0];
				break;
			case "ikSpine2":
				$ikSpine2 = $connections[0];
				break;
			case "ikSpine3":
				$ikSpine3 = $connections[0];
				break;
			case "chestParent":
				$chestParent = $connections[0];
				break;
			default:
				break;
		}
	}

	print ("*\n*Rigging Props\n");
	print ("*------------------------\n");	

	string $scale[] = { ".sx", ".sy", ".sz" };
	string $translation[] = { ".tx", ".ty", ".tz" };
	string $rotation[] = { ".rx", ".ry", ".rz" };
	string $vis[] = { ".v" };

	// Cigarette bone.
    string $cig[] = {($namespace + "prp_cig"), ($namespace + "prp_cigEnd")};
    string $cigFK[] = vstFKchain("p", $cig, 0.5); 
	$cigFKZero = `vstMakeZero $cigFK[0]`;
	vstHideChannels ($cigFK[0], $scale);
	vstHideChannels ($cigFK[0], $vis);
	vstSelectHandle ($cigFK[0], 0,0,0);
	vstAddPlotted ($cigFK[0]);
	parent $cigFKZero $headControl;

	// Suit jacket bones.
    string $coatRootBones[] = {( "prp_coat_front_0_L" ),( "prp_coat_back_0_L" ),( "prp_coat_front_0_R" ),( "prp_coat_back_0_R" )};
	for ( $coat in $coatRootBones )
	{
		// Add the namespace in.
		$coat = ( $namespace + $coat );
		// Get the child of the $coat bone.
		string $coatChild[] = `listRelatives -c $coat`;
		// Controls are cylinders, oriented along -Y from the $coat bone to its child.
		string $coatChain[] = { $coat, $coatChild[0] };
	    string $coatFK[] = vstFKchainAxis( "p", $coatChain, 1.5, "-Y" );
		$coatZeroGroup = `vstMakeZero $coatFK[0]`;
		vstHideChannels ( $coatFK[0], $translation );
		vstHideChannels ( $coatFK[0], $scale );
		vstHideChannels ( $coatFK[0], $vis );
		vstSelectHandle ( $coatFK[0], 0,0,0 );
		vstAddPlotted ( $coatFK[0] );
		parent $coatZeroGroup $pelvisControl;
	}

	// Jacket and pants cuff bones.
	string $prop0[] = vstRigProp ( "p", ( $namespace + "prp_pantsFront_R" ), $headControl );
	string $prop1[] = vstRigProp ( "p", ( $namespace + "prp_pantsBack_R" ), $headControl );
	string $prop2[] = vstRigProp ( "p", ( $namespace + "prp_pantsFront_L" ), $headControl );
	string $prop3[] = vstRigProp ( "p", ( $namespace + "prp_pantsBack_L" ), $headControl );

	string $prop4[] = vstRigProp ( "p", ( $namespace + "prp_wristOuter_R" ), $headControl );
	string $prop5[] = vstRigProp ( "p", ( $namespace + "prp_wristInner_R" ), $headControl );
	string $prop6[] = vstRigProp ( "p", ( $namespace + "prp_wristOuter_L" ), $headControl );
	string $prop7[] = vstRigProp ( "p", ( $namespace + "prp_wristInner_L" ), $headControl );

	$props = { $prop0[1], $prop1[1], $prop2[1], $prop3[1], $prop4[1], $prop5[1], $prop6[1], $prop7[1] };
	for ( $propBone in $props )
	{
		vstHideChannels ( $propBone, $scale );
		vstHideChannels ( $propBone, $vis );
		vstSelectHandle ( $propBone, 0,0,0 );
		vstAddPlotted ( $propBone );
	}	

	vstMultiParent ( $prop0[0], "Ref:bip_knee_RFK", "Ref:bip_knee_RIK", "main.rLegIKFK" );
	vstMultiParent ( $prop1[0], "Ref:bip_knee_RFK", "Ref:bip_knee_RIK", "main.rLegIKFK" );
	vstMultiParent ( $prop2[0], "Ref:bip_knee_LFK", "Ref:bip_knee_LIK", "main.lLegIKFK" );
	vstMultiParent ( $prop3[0], "Ref:bip_knee_LFK", "Ref:bip_knee_LIK", "main.lLegIKFK" );

	vstMultiParent ( $prop4[0], "Ref:bip_lowerArm_RFK", "Ref:bip_lowerArm_RIK", "main.rArmIKFK" );
	vstMultiParent ( $prop5[0], "Ref:bip_lowerArm_RFK", "Ref:bip_lowerArm_RIK", "main.rArmIKFK" );
	vstMultiParent ( $prop6[0], "Ref:bip_lowerArm_LFK", "Ref:bip_lowerArm_LIK", "main.lArmIKFK" );
	vstMultiParent ( $prop7[0], "Ref:bip_lowerArm_LFK", "Ref:bip_lowerArm_LIK", "main.lArmIKFK" );

	print ("*\nDone with prop bones.\n");
	print ("**************************\n");
	select -cl;

	// Offset the pole vectors.
	setAttr "rkneeControl.translateZ" 20;
	setAttr "lkneeControl.translateZ" 20;
	setAttr "lElbowControl.translateZ" -20;
	setAttr "rElbowControl.translateZ" -20;

	// Delete the footguides.
	delete $footGuides;

}